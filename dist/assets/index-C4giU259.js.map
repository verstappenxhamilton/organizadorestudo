{"version":3,"file":"index-C4giU259.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/components/SyllabusProcessor.jsx","../../src/components/Modals.jsx","../../src/components/SessionModal.jsx","../../src/components/SubjectsOverview.jsx","../../src/components/SubjectsManagement.jsx","../../src/components/Header.jsx","../../src/components/Calendar.jsx","../../src/utils/localStorage.js","../../src/App.jsx","../../src/components/EditalHierarchyProcessor.jsx","../../src/config/firebase.js","../../src/services/globalEditaisService.js","../../src/Admin.jsx","../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js","../../src/main.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React, { useState } from 'react';\nimport { ClipboardPaste, Eye, Trash2, Edit3, ChevronUp, ChevronDown } from 'lucide-react';\n\nexport const SyllabusProcessor = ({ \n  onAddMultipleItems, \n  showToast,\n  syllabusItems,\n  onUpdateItemName,\n  onDeleteItem,\n  onMoveItemUp,\n  onMoveItemDown\n}) => {\n  const [pastedSyllabusText, setPastedSyllabusText] = useState('');\n  const [processedPastedItems, setProcessedPastedItems] = useState([]);\n  const [isPasteAreaVisible, setIsPasteAreaVisible] = useState(false);\n  const [editingItemId, setEditingItemId] = useState(null);\n  const [editingItemNameValue, setEditingItemNameValue] = useState('');\n\n  const handleProcessPastedSyllabus = () => {\n    if (!pastedSyllabusText.trim()) {\n      showToast(\"Nenhum texto para processar.\", \"info\");\n      return;\n    }\n\n    const text = pastedSyllabusText.trim();\n    const parsedItemsOutput = [];\n\n    const subjectMatch = text.match(/^([A-ZÁÊÇÕ\\s]+):\\s*/);\n    let processText = text;\n    \n    if (subjectMatch) {\n      processText = text.substring(subjectMatch[0].length);\n    }\n\n    const processItems = () => {\n      const segments = processText.split(/(?:\\.\\s+(?=\\d+\\s)|\\n)/);\n      \n      segments.forEach(segment => {\n        segment = segment.trim();\n        if (!segment) return;\n\n        const mainItemMatch = segment.match(/^(\\d+)\\s+(.+)/);\n        if (mainItemMatch) {\n          const [, number, content] = mainItemMatch;\n          parsedItemsOutput.push(`${number}. ${content.trim()}`);\n          return;\n        }\n\n        const subItemMatch = segment.match(/^(\\d+\\.\\d+)\\.?\\s+(.+)/);\n        if (subItemMatch) {\n          const [, number, content] = subItemMatch;\n          parsedItemsOutput.push(`${number}. ${content.trim()}`);\n          return;\n        }\n\n        const subSubItemMatch = segment.match(/^(\\d+\\.\\d+\\.\\d+)\\.?\\s+(.+)/);\n        if (subSubItemMatch) {\n          const [, number, content] = subSubItemMatch;\n          parsedItemsOutput.push(`${number}. ${content.trim()}`);\n          return;\n        }\n\n        const anyNumberMatch = segment.match(/^(\\d+(?:\\.\\d+)*\\.?)\\s+(.+)/);\n        if (anyNumberMatch) {\n          const [, number, content] = anyNumberMatch;\n          const cleanNumber = number.replace(/\\.$/, '');\n          parsedItemsOutput.push(`${cleanNumber}. ${content.trim()}`);\n        }\n      });\n    };\n\n    processItems();\n\n    const filteredItems = parsedItemsOutput.filter(item => item.trim().length > 0);\n    setProcessedPastedItems(filteredItems);\n    showToast(`${filteredItems.length} item(ns) processado(s). Revise e adicione.`, \"info\");\n  };\n\n  const handleEditItemNameClick = (item) => {\n    setEditingItemId(item.id);\n    setEditingItemNameValue(item.name);\n  };\n\n  const handleSaveItemName = (itemId) => {\n    if (editingItemNameValue.trim()) {\n      const oldItem = syllabusItems.find(i => i.id === itemId);\n      onUpdateItemName(itemId, oldItem?.name, editingItemNameValue);\n      setEditingItemId(null);\n      setEditingItemNameValue('');\n    } else {\n      showToast(\"O nome do item não pode ser vazio.\", \"error\");\n    }\n  };\n\n  const SyllabusItemDisplay = ({ item, onEditItemName, onDeleteItem, onMoveItemUp, onMoveItemDown, isFirst, isLast }) => {\n    const isSubItem = item.name && typeof item.name === 'string' && (\n      item.name.startsWith(\" - \") || \n      /^\\d+\\.\\d+/.test(item.name.trim())\n    );\n    \n    return (\n      <div className={`p-3.5 mb-2.5 border bg-slate-100 dark:bg-slate-700/50 border-slate-200 dark:border-slate-700 rounded-lg shadow-sm hover:shadow-md transition-shadow ${isSubItem ? 'ml-4 sm:ml-6' : ''}`}>\n        <div className=\"flex justify-between items-center\">\n          <span className={`font-medium text-slate-700 dark:text-slate-200 flex-grow whitespace-pre-wrap ${!isSubItem ? 'font-semibold text-base' : 'text-sm'}`}>\n            {item.name}\n          </span>\n          <div className=\"flex items-center space-x-1.5 ml-2 flex-shrink-0\">\n            <button onClick={() => onMoveItemUp(item)} disabled={isFirst} className=\"text-slate-400 hover:text-sky-400 p-1 disabled:opacity-50 disabled:cursor-not-allowed\" title=\"Mover para Cima\">\n              <ChevronUp size={16}/>\n            </button>\n            <button onClick={() => onMoveItemDown(item)} disabled={isLast} className=\"text-slate-400 hover:text-sky-400 p-1 disabled:opacity-50 disabled:cursor-not-allowed\" title=\"Mover para Baixo\">\n              <ChevronDown size={16}/>\n            </button>\n            <button onClick={() => onEditItemName(item)} title=\"Editar Nome\" className=\"text-yellow-500 hover:text-yellow-600 p-1.5 rounded-md hover:bg-yellow-500/10 transition-colors\">\n              <Edit3 size={18}/>\n            </button>\n            <button onClick={() => onDeleteItem(item)} title=\"Excluir Item\" className=\"text-red-500 hover:text-red-600 p-1.5 rounded-md hover:bg-red-500/10 transition-colors\">\n              <Trash2 size={18}/>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"border-t border-slate-200 dark:border-slate-700 pt-4\">\n        <button\n          onClick={() => setIsPasteAreaVisible(!isPasteAreaVisible)}\n          className=\"flex items-center text-sm font-medium text-sky-600 dark:text-sky-400 hover:text-sky-700 dark:hover:text-sky-300 mb-3\"\n        >\n          <ClipboardPaste size={16} className=\"mr-2\" />\n          {isPasteAreaVisible ? 'Ocultar' : 'Mostrar'} Processador de Edital Colado\n        </button>\n\n        {isPasteAreaVisible && (\n          <div className=\"bg-slate-50 dark:bg-slate-800/50 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\n            <label className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n              Cole o Edital Aqui para Processamento Rápido\n            </label>\n            <textarea\n              value={pastedSyllabusText}\n              onChange={(e) => setPastedSyllabusText(e.target.value)}\n              placeholder=\"Cole o conteúdo do edital aqui. O sistema tentará identificar tópicos e subtópicos automaticamente.\"\n              className=\"w-full h-32 p-3 text-sm border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 focus:ring-sky-500 focus:border-sky-500\"\n            />\n            <button\n              onClick={handleProcessPastedSyllabus}\n              className=\"mt-2 px-4 py-2 bg-sky-600 text-white rounded-lg hover:bg-sky-700 transition-colors text-sm font-medium\"\n            >\n              Processar Edital Colado\n            </button>\n\n            {processedPastedItems.length > 0 && (\n              <div className=\"mt-4\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <h4 className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                    Itens Processados ({processedPastedItems.length})\n                  </h4>\n                  <button\n                    onClick={() => {\n                      onAddMultipleItems(processedPastedItems);\n                      setProcessedPastedItems([]);\n                      setPastedSyllabusText('');\n                      showToast(\"Itens adicionados com sucesso!\", \"success\");\n                    }}\n                    className=\"px-3 py-1.5 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors text-xs font-medium\"\n                  >\n                    Adicionar Todos\n                  </button>\n                </div>\n                <div className=\"max-h-48 overflow-y-auto custom-scrollbar space-y-1\">\n                  {processedPastedItems.map((item, index) => {\n                    const isSubItem = /^\\d+\\.\\d+/.test(item.trim());\n                    return (\n                      <div\n                        key={index}\n                        className={`p-2 text-xs bg-white dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded ${isSubItem ? 'ml-4 text-slate-600 dark:text-slate-400' : 'font-medium'}`}\n                      >\n                        {item}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {syllabusItems && syllabusItems.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n            Itens do Edital ({syllabusItems.length})\n          </h4>\n          <div className=\"max-h-96 overflow-y-auto custom-scrollbar\">\n            {syllabusItems.map((item, index) => (\n              <div key={item.id}>\n                {editingItemId === item.id ? (\n                  <div className=\"p-3 mb-2 border border-sky-300 dark:border-sky-600 rounded-lg bg-sky-50 dark:bg-sky-900/20\">\n                    <input\n                      type=\"text\"\n                      value={editingItemNameValue}\n                      onChange={(e) => setEditingItemNameValue(e.target.value)}\n                      className=\"w-full p-2 text-sm border border-slate-300 dark:border-slate-600 rounded bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100\"\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                          handleSaveItemName(item.id);\n                        }\n                      }}\n                      autoFocus\n                    />\n                    <div className=\"flex justify-end space-x-2 mt-2\">\n                      <button\n                        onClick={() => handleSaveItemName(item.id)}\n                        className=\"px-3 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700\"\n                      >\n                        Salvar\n                      </button>\n                      <button\n                        onClick={() => {\n                          setEditingItemId(null);\n                          setEditingItemNameValue('');\n                        }}\n                        className=\"px-3 py-1 bg-gray-500 text-white rounded text-xs hover:bg-gray-600\"\n                      >\n                        Cancelar\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <SyllabusItemDisplay\n                    item={item}\n                    onEditItemName={handleEditItemNameClick}\n                    onDeleteItem={onDeleteItem}\n                    onMoveItemUp={onMoveItemUp}\n                    onMoveItemDown={onMoveItemDown}\n                    isFirst={index === 0}\n                    isLast={index === syllabusItems.length - 1}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { X, Eye } from 'lucide-react';\nimport { SyllabusProcessor } from './SyllabusProcessor';\n\n// Modal de Perfil\nexport const ProfileModal = ({ \n  isOpen, \n  onClose, \n  editingProfile, \n  onSubmit, \n  showToast \n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    examDate: '',\n    institution: ''\n  });\n\n  useEffect(() => {\n    if (editingProfile) {\n      setFormData({\n        name: editingProfile.name || '',\n        description: editingProfile.description || '',\n        examDate: editingProfile.examDate || '',\n        institution: editingProfile.institution || ''\n      });\n    } else {\n      setFormData({\n        name: '',\n        description: '',\n        examDate: '',\n        institution: ''\n      });\n    }\n  }, [editingProfile]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim()) {\n      showToast('Nome do perfil é obrigatório', 'warning');\n      return;\n    }\n\n    onSubmit(formData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          {editingProfile ? 'Editar Perfil' : 'Novo Perfil de Concurso'}\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label className=\"form-label\">Nome do Concurso <span className=\"text-red-500\">*</span></label>\n              <input\n                type=\"text\"\n                className=\"form-input\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Descrição</label>\n              <textarea\n                className=\"form-textarea\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Descrição do concurso...\"\n                rows=\"3\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Data da Prova</label>\n              <input\n                type=\"date\"\n                className=\"form-input\"\n                value={formData.examDate}\n                onChange={(e) => setFormData(prev => ({ ...prev, examDate: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Instituição</label>\n              <input\n                type=\"text\"\n                className=\"form-input\"\n                value={formData.institution}\n                onChange={(e) => setFormData(prev => ({ ...prev, institution: e.target.value }))}\n                placeholder=\"Ex: CESPE, FCC, VUNESP...\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <button\n                type=\"button\"\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                onClick={onClose}\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                disabled={!formData.name.trim()}\n              >\n                {editingProfile ? 'Salvar Alterações' : 'Criar Concurso'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Modal de Matéria\nexport const SubjectModal = ({ \n  isOpen, \n  onClose, \n  editingSubject, \n  onSubmit, \n  showToast \n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    color: '#3b82f6',\n    targetHours: 0\n  });\n\n  useEffect(() => {\n    if (editingSubject) {\n      setFormData({\n        name: editingSubject.name || '',\n        description: editingSubject.description || '',\n        color: editingSubject.color || '#3b82f6',\n        targetHours: editingSubject.targetHours || 0\n      });\n    } else {\n      setFormData({\n        name: '',\n        description: '',\n        color: '#3b82f6',\n        targetHours: 0\n      });\n    }\n  }, [editingSubject]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim()) {\n      showToast('Nome da matéria é obrigatório', 'warning');\n      return;\n    }\n\n    onSubmit(formData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          {editingSubject ? 'Editar Matéria' : 'Nova Matéria'}\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label className=\"form-label\">Nome da Matéria <span className=\"text-red-500\">*</span></label>\n              <input\n                type=\"text\"\n                className=\"form-input\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Matemática\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Meta de Horas (opcional)</label>\n              <input\n                type=\"number\"\n                className=\"form-input\"\n                value={formData.targetHours}\n                onChange={(e) => setFormData(prev => ({ ...prev, targetHours: parseInt(e.target.value) || 0 }))}\n                min=\"0\"\n                placeholder=\"23\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <button\n                type=\"button\"\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                onClick={onClose}\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                disabled={!formData.name.trim()}\n              >\n                {editingSubject ? 'Salvar Alterações' : 'Salvar Matéria'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Modal de Detalhes do Item\nexport const ItemDetailsModal = ({\n  isOpen,\n  onClose,\n  selectedItem,\n  subjects,\n  studySessions\n}) => {\n  if (!isOpen || !selectedItem) return null;\n\n  const subjectName = subjects.find(s => s.id === selectedItem.subjectId)?.name || 'Matéria';\n\n  // Buscar sessões relacionadas a este item\n  const itemSessions = studySessions.filter(session =>\n    session.syllabusItemId === selectedItem.id\n  );\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          Detalhes do Item: {selectedItem.name} ({subjectName})\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6\">\n          {/* Histórico de Estudos */}\n          <div style={{ marginBottom: '24px' }}>\n            <h3 style={{ color: '#e2e8f0', marginBottom: '12px', fontSize: '1.1rem' }}>\n              Histórico de Estudos:\n            </h3>\n\n            {itemSessions.length === 0 ? (\n              <div style={{\n                padding: '16px',\n                background: 'rgba(71, 85, 105, 0.2)',\n                borderRadius: '8px',\n                color: '#94a3b8',\n                textAlign: 'center'\n              }}>\n                Nenhuma sessão de estudo registrada para este item.\n              </div>\n            ) : (\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n                {itemSessions.map(session => (\n                  <div\n                    key={session.id}\n                    style={{\n                      padding: '12px 16px',\n                      background: 'rgba(71, 85, 105, 0.2)',\n                      borderRadius: '8px',\n                      color: '#e2e8f0'\n                    }}\n                  >\n                    Estudado em {new Date(session.date).toLocaleDateString('pt-BR')} ({(session.duration / 60).toFixed(1)}h)\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Histórico de Acertos */}\n          <div style={{ marginBottom: '24px' }}>\n            <h3 style={{ color: '#e2e8f0', marginBottom: '12px', fontSize: '1.1rem' }}>\n              Histórico de Acertos:\n            </h3>\n\n            {itemSessions.filter(s => s.accuracy !== undefined).length === 0 ? (\n              <div style={{\n                padding: '16px',\n                background: 'rgba(71, 85, 105, 0.2)',\n                borderRadius: '8px',\n                color: '#94a3b8',\n                textAlign: 'center'\n              }}>\n                Nenhum registro de acertos para este item.\n              </div>\n            ) : (\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n                {itemSessions\n                  .filter(session => session.accuracy !== undefined)\n                  .map(session => (\n                    <div\n                      key={session.id}\n                      style={{\n                        padding: '12px 16px',\n                        background: 'rgba(71, 85, 105, 0.2)',\n                        borderRadius: '8px',\n                        color: '#e2e8f0'\n                      }}\n                    >\n                      Acerto: {session.accuracy}% em {new Date(session.date).toLocaleDateString('pt-BR')}, {new Date(session.date).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                    </div>\n                  ))\n                }\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 text-right\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={onClose}\n          >\n            Fechar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Modal de Edital (Syllabus)\nexport const SyllabusModal = ({\n  isOpen,\n  onClose,\n  currentSubjectForSyllabus,\n  syllabusItems,\n  setSyllabusItems,\n  showToast\n}) => {\n  const [newItemName, setNewItemName] = useState('');\n\n  const handleAddItem = () => {\n    if (!newItemName.trim()) {\n      showToast('Nome do item é obrigatório', 'warning');\n      return;\n    }\n\n    const newItem = {\n      id: Date.now().toString(),\n      subjectId: currentSubjectForSyllabus.id,\n      name: newItemName.trim(),\n      isStudied: false,\n      createdAt: new Date().toISOString()\n    };\n\n    const updatedItems = [...syllabusItems, newItem];\n    setSyllabusItems(updatedItems);\n    localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n    setNewItemName('');\n    showToast('Item adicionado com sucesso!', 'success');\n  };\n\n  const handleAddMultipleItems = (items) => {\n    const newItems = items.map((itemName, index) => ({\n      id: (Date.now() + index).toString(),\n      subjectId: currentSubjectForSyllabus.id,\n      name: itemName.trim(),\n      isStudied: false,\n      createdAt: new Date().toISOString()\n    }));\n\n    const updatedItems = [...syllabusItems, ...newItems];\n    setSyllabusItems(updatedItems);\n    localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n  };\n\n  const handleUpdateItemName = (itemId, oldName, newName) => {\n    const updatedItems = syllabusItems.map(item =>\n      item.id === itemId ? { ...item, name: newName } : item\n    );\n    setSyllabusItems(updatedItems);\n    localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n    showToast('Item atualizado com sucesso!', 'success');\n  };\n\n  const handleDeleteItem = (item) => {\n    const updatedItems = syllabusItems.filter(i => i.id !== item.id);\n    setSyllabusItems(updatedItems);\n    localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n    showToast('Item removido com sucesso!', 'success');\n  };\n\n  const handleMoveItemUp = (item) => {\n    const currentIndex = syllabusItems.findIndex(i => i.id === item.id);\n    if (currentIndex > 0) {\n      const newItems = [...syllabusItems];\n      [newItems[currentIndex], newItems[currentIndex - 1]] = [newItems[currentIndex - 1], newItems[currentIndex]];\n      setSyllabusItems(newItems);\n      localStorage.setItem('syllabusItems', JSON.stringify(newItems));\n    }\n  };\n\n  const handleMoveItemDown = (item) => {\n    const currentIndex = syllabusItems.findIndex(i => i.id === item.id);\n    if (currentIndex < syllabusItems.length - 1) {\n      const newItems = [...syllabusItems];\n      [newItems[currentIndex], newItems[currentIndex + 1]] = [newItems[currentIndex + 1], newItems[currentIndex]];\n      setSyllabusItems(newItems);\n      localStorage.setItem('syllabusItems', JSON.stringify(newItems));\n    }\n  };\n\n  if (!isOpen || !currentSubjectForSyllabus) return null;\n\n  const subjectItems = syllabusItems.filter(item => item.subjectId === currentSubjectForSyllabus.id);\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal large\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          Gerenciar Edital - {currentSubjectForSyllabus.name}\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6 custom-scrollbar\" style={{ maxHeight: 'calc(90vh - 120px)', overflowY: 'auto' }}>\n          {/* Adicionar item individual */}\n          <div className=\"form-group\">\n            <label className=\"form-label\">Novo Item do Edital (Individual)</label>\n            <div style={{ display: 'flex', gap: '8px' }}>\n              <input\n                type=\"text\"\n                className=\"form-input\"\n                value={newItemName}\n                onChange={(e) => setNewItemName(e.target.value)}\n                placeholder=\"Nome do tópico/artigo\"\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    handleAddItem();\n                  }\n                }}\n              />\n              <button\n                className=\"btn btn-primary\"\n                onClick={handleAddItem}\n                disabled={!newItemName.trim()}\n              >\n                Adicionar\n              </button>\n            </div>\n          </div>\n\n          {/* Processador de Edital Melhorado */}\n          <SyllabusProcessor\n            onAddMultipleItems={handleAddMultipleItems}\n            showToast={showToast}\n            syllabusItems={subjectItems}\n            onUpdateItemName={handleUpdateItemName}\n            onDeleteItem={handleDeleteItem}\n            onMoveItemUp={handleMoveItemUp}\n            onMoveItemDown={handleMoveItemDown}\n          />\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 text-right\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={onClose}\n          >\n            Fechar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Modal de Histórico de Sessões\nexport const SessionHistoryModal = ({\n  isOpen,\n  onClose,\n  selectedSubject,\n  studySessions,\n  setEditingSession,\n  setIsSessionModalOpen,\n  setConfirmationDialog\n}) => {\n  if (!isOpen || !selectedSubject) return null;\n\n  const subjectSessions = studySessions\n    .filter(session => session.subjectId === selectedSubject.id)\n    .sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  const totalTime = subjectSessions.reduce((total, session) => total + (session.duration || 0), 0) / 60;\n\n  const handleEditSession = (session) => {\n    setEditingSession(session);\n    setIsSessionModalOpen(true);\n    onClose();\n  };\n\n  const handleDeleteSession = (sessionId) => {\n    setConfirmationDialog({\n      isOpen: true,\n      title: 'Confirmar Exclusão',\n      message: 'Tem certeza que deseja deletar esta sessão de estudo?',\n      onConfirm: () => {\n        // Aqui seria implementada a função de deletar sessão\n        setConfirmationDialog({ isOpen: false, title: '', message: '', onConfirm: () => {} });\n      }\n    });\n  };\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal large\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          Histórico de Sessões - {selectedSubject.name}\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6\">\n          {/* Estatísticas */}\n          <div style={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\n            gap: '16px',\n            marginBottom: '24px'\n          }}>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{subjectSessions.length}</div>\n              <div className=\"stat-label\">Total de Sessões</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{totalTime.toFixed(1)}h</div>\n              <div className=\"stat-label\">Tempo Total</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">\n                {subjectSessions.length > 0 ? (totalTime / subjectSessions.length).toFixed(1) : 0}h\n              </div>\n              <div className=\"stat-label\">Média por Sessão</div>\n            </div>\n          </div>\n\n          {/* Lista de Sessões */}\n          <div>\n            <h3 style={{ color: '#e2e8f0', marginBottom: '16px' }}>\n              Sessões de Estudo\n            </h3>\n\n            {subjectSessions.length === 0 ? (\n              <div style={{\n                padding: '40px 20px',\n                textAlign: 'center',\n                color: '#94a3b8'\n              }}>\n                Nenhuma sessão de estudo registrada para esta matéria.\n              </div>\n            ) : (\n              <div style={{ maxHeight: '400px', overflowY: 'auto' }}>\n                {subjectSessions.map(session => (\n                  <div\n                    key={session.id}\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      padding: '16px',\n                      background: 'rgba(30, 41, 59, 0.6)',\n                      border: '1px solid rgba(148, 163, 184, 0.2)',\n                      borderRadius: '8px',\n                      marginBottom: '8px'\n                    }}\n                  >\n                    <div style={{ flex: 1 }}>\n                      <div style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '12px',\n                        marginBottom: '8px'\n                      }}>\n                        <span style={{\n                          color: '#f1f5f9',\n                          fontWeight: '500',\n                          fontSize: '0.9rem'\n                        }}>\n                          {new Date(session.date).toLocaleDateString('pt-BR')}\n                        </span>\n                        <span style={{\n                          color: '#3b82f6',\n                          fontWeight: '500',\n                          fontSize: '0.9rem'\n                        }}>\n                          {(session.duration / 60).toFixed(1)}h\n                        </span>\n                        {session.accuracy !== undefined && (\n                          <span style={{\n                            color: '#10b981',\n                            fontWeight: '500',\n                            fontSize: '0.8rem'\n                          }}>\n                            {session.accuracy}% acerto\n                          </span>\n                        )}\n                      </div>\n                      {session.notes && (\n                        <div style={{\n                          color: '#cbd5e1',\n                          fontSize: '0.8rem',\n                          fontStyle: 'italic'\n                        }}>\n                          {session.notes}\n                        </div>\n                      )}\n                    </div>\n\n                    <div style={{ display: 'flex', gap: '8px' }}>\n                      <button\n                        className=\"btn btn-warning btn-sm\"\n                        onClick={() => handleEditSession(session)}\n                        style={{ padding: '4px 8px', fontSize: '0.7rem' }}\n                      >\n                        Editar\n                      </button>\n                      <button\n                        className=\"btn btn-danger btn-sm\"\n                        onClick={() => handleDeleteSession(session.id)}\n                        style={{ padding: '4px 8px', fontSize: '0.7rem' }}\n                      >\n                        Deletar\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 text-right\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={onClose}\n          >\n            Fechar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Modal de Relatório de Progresso\nexport const ProgressReportModal = ({\n  isOpen,\n  onClose,\n  subjects,\n  studySessions,\n  syllabusItems,\n  getSubjectStudyTime\n}) => {\n  if (!isOpen) return null;\n\n  const totalStudyTime = studySessions.reduce((total, session) => total + (session.duration || 0), 0) / 60;\n  const totalSyllabusItems = syllabusItems.length;\n  const studiedSyllabusItems = syllabusItems.filter(item => item.isStudied).length;\n  const averageAccuracy = syllabusItems.length > 0\n    ? syllabusItems.reduce((sum, item) => sum + (item.accuracy || 0), 0) / syllabusItems.length\n    : 0;\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal large\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          Relatório de Progresso\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6\">\n          {/* Estatísticas Gerais */}\n          <div className=\"stats-grid\" style={{ marginBottom: '30px' }}>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{totalStudyTime.toFixed(1)}h</div>\n              <div className=\"stat-label\">Total Horas Estudadas</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{studiedSyllabusItems}</div>\n              <div className=\"stat-label\">Itens do Edital Estudados</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{averageAccuracy.toFixed(1)}%</div>\n              <div className=\"stat-label\">Média de Acertos</div>\n            </div>\n            <div className=\"stat-card\">\n              <div className=\"stat-value\">{studySessions.length}</div>\n              <div className=\"stat-label\">Sessões de Estudo</div>\n            </div>\n          </div>\n\n          {/* Progresso por Matéria */}\n          <div>\n            <h3 style={{ color: '#e2e8f0', marginBottom: '20px', fontSize: '1.2rem' }}>\n              Progresso por Matéria\n            </h3>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>\n              {subjects.map(subject => {\n                const subjectTime = getSubjectStudyTime(subject.id);\n                const subjectSessions = studySessions.filter(s => s.subjectId === subject.id);\n                const subjectSyllabusItems = syllabusItems.filter(item => item.subjectId === subject.id);\n                const studiedSubjectItems = subjectSyllabusItems.filter(item => item.isStudied);\n                const progress = subjectSyllabusItems.length > 0 ? (studiedSubjectItems.length / subjectSyllabusItems.length) * 100 : 0;\n\n                return (\n                  <div key={subject.id} style={{\n                    padding: '15px',\n                    background: 'rgba(30, 41, 59, 0.6)',\n                    borderRadius: '8px',\n                    border: '1px solid rgba(148, 163, 184, 0.2)'\n                  }}>\n                    <div style={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      marginBottom: '10px'\n                    }}>\n                      <h4 style={{ color: '#f1f5f9', margin: 0 }}>{subject.name}</h4>\n                      <span style={{ color: '#94a3b8', fontSize: '0.9rem' }}>\n                        {subjectTime.toFixed(1)}h • {subjectSessions.length} sessões\n                      </span>\n                    </div>\n                    <div style={{\n                      width: '100%',\n                      height: '8px',\n                      background: 'rgba(148, 163, 184, 0.2)',\n                      borderRadius: '4px',\n                      overflow: 'hidden'\n                    }}>\n                      <div style={{\n                        width: `${progress}%`,\n                        height: '100%',\n                        background: 'linear-gradient(90deg, #3b82f6, #8b5cf6)',\n                        transition: 'width 0.3s ease'\n                      }} />\n                    </div>\n                    <div style={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      marginTop: '5px',\n                      fontSize: '0.8rem',\n                      color: '#94a3b8'\n                    }}>\n                      <span>{studiedSubjectItems.length} de {subjectSyllabusItems.length} itens</span>\n                      <span>{progress.toFixed(1)}%</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 text-right\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={onClose}\n          >\n            Fechar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nexport const SessionModal = ({ \n  isOpen, \n  onClose, \n  editingSession, \n  initialSessionData,\n  currentSubjectForSession,\n  subjects,\n  syllabusItems,\n  onSubmit, \n  showToast \n}) => {\n  const [formData, setFormData] = useState({\n    subjectId: '',\n    date: '',\n    duration: 0,\n    topics: '',\n    notes: '',\n    difficulty: 'medium',\n    satisfaction: 5\n  });\n\n  useEffect(() => {\n    if (editingSession) {\n      setFormData({\n        subjectId: editingSession.subjectId || '',\n        date: editingSession.date || '',\n        duration: editingSession.duration || 0,\n        topics: editingSession.topics || '',\n        notes: editingSession.notes || '',\n        difficulty: editingSession.difficulty || 'medium',\n        satisfaction: editingSession.satisfaction || 5\n      });\n    } else if (initialSessionData) {\n      setFormData({\n        subjectId: initialSessionData.subjectId || '',\n        date: new Date().toISOString().split('T')[0],\n        duration: 0,\n        topics: '',\n        notes: '',\n        difficulty: 'medium',\n        satisfaction: 5\n      });\n    } else {\n      setFormData({\n        subjectId: currentSubjectForSession || '',\n        date: new Date().toISOString().split('T')[0],\n        duration: 0,\n        topics: '',\n        notes: '',\n        difficulty: 'medium',\n        satisfaction: 5\n      });\n    }\n  }, [editingSession, initialSessionData, currentSubjectForSession]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.subjectId) {\n      showToast('Selecione uma matéria', 'warning');\n      return;\n    }\n\n    if (!formData.date) {\n      showToast('Data é obrigatória', 'warning');\n      return;\n    }\n\n    if (formData.duration <= 0) {\n      showToast('Duração deve ser maior que zero', 'warning');\n      return;\n    }\n\n    onSubmit(formData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={(e) => {\n      if (e.target === e.currentTarget) {\n        onClose();\n      }\n    }}>\n      <div className=\"modal session-modal\" onClick={(e) => e.stopPropagation()}>\n        <h2>\n          {editingSession ? 'Editar Sessão' : 'Registrar Sessão de Estudo'}\n          <button className=\"close-btn\" onClick={onClose}>\n            ×\n          </button>\n        </h2>\n\n        <div className=\"p-6 session-modal-content custom-scrollbar\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label className=\"form-label\">Matéria <span className=\"text-red-500\">*</span></label>\n              <select\n                className=\"form-select\"\n                value={formData.subjectId}\n                onChange={(e) => setFormData(prev => ({ ...prev, subjectId: e.target.value }))}\n                required\n              >\n                <option value=\"\">Selecione uma matéria</option>\n                {subjects.map(subject => (\n                  <option key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Data <span className=\"text-red-500\">*</span></label>\n              <input\n                type=\"date\"\n                className=\"form-input\"\n                value={formData.date}\n                onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Duração (horas) <span className=\"text-red-500\">*</span></label>\n              <input\n                type=\"number\"\n                step=\"0.1\"\n                className=\"form-input\"\n                value={formData.duration / 60}\n                onChange={(e) => setFormData(prev => ({ ...prev, duration: parseFloat(e.target.value) * 60 || 0 }))}\n                min=\"0.1\"\n                placeholder=\"Ex: 1.5\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Item do Edital (opcional)</label>\n              <select\n                className=\"form-select\"\n                value={formData.syllabusItemId || ''}\n                onChange={(e) => setFormData(prev => ({ ...prev, syllabusItemId: e.target.value }))}\n              >\n                <option value=\"\">Selecione um item</option>\n                {formData.subjectId && syllabusItems\n                  .filter(item => item.subjectId === formData.subjectId)\n                  .map(item => (\n                    <option key={item.id} value={item.id}>\n                      {item.name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Percentual de Acerto (%) (opcional)</label>\n              <input\n                type=\"number\"\n                className=\"form-input\"\n                value={formData.accuracy || ''}\n                onChange={(e) => setFormData(prev => ({ ...prev, accuracy: parseFloat(e.target.value) || 0 }))}\n                min=\"0\"\n                max=\"100\"\n                placeholder=\"0-100\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Observações</label>\n              <textarea\n                className=\"form-textarea\"\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"\"\n                rows=\"3\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  checked={formData.isReview || false}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isReview: e.target.checked }))}\n                />\n                <span className=\"text-sm text-gray-700\">Esta sessão foi de revisão?</span>\n              </label>\n            </div>\n\n            {/* Agendamento de Revisão */}\n            <div className=\"form-group\">\n              <label className=\"form-label\">Agendar próxima revisão em:</label>\n              <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap', marginBottom: '12px' }}>\n                {[1, 3, 7, 15, 30].map(days => (\n                  <button\n                    key={days}\n                    type=\"button\"\n                    onClick={() => {\n                      const nextReviewDate = new Date();\n                      nextReviewDate.setDate(nextReviewDate.getDate() + days);\n                      setFormData(prev => ({\n                        ...prev,\n                        nextReviewDate: nextReviewDate.toISOString().split('T')[0],\n                        reviewDays: days\n                      }));\n                    }}\n                    style={{\n                      padding: '8px 16px',\n                      background: formData.reviewDays === days ? '#8b5cf6' : '#6b46c1',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '20px',\n                      fontSize: '0.9rem',\n                      cursor: 'pointer'\n                    }}\n                  >\n                    {days} dia{days > 1 ? 's' : ''}\n                  </button>\n                ))}\n              </div>\n\n              {formData.nextReviewDate && (\n                <div style={{\n                  padding: '8px 12px',\n                  background: 'rgba(139, 92, 246, 0.1)',\n                  borderRadius: '6px',\n                  fontSize: '0.9rem',\n                  color: '#8b5cf6'\n                }}>\n                  Revisão será agendada para: {new Date(formData.nextReviewDate).toLocaleDateString('pt-BR')}\n                </div>\n              )}\n\n              <label className=\"flex items-center gap-2 mt-3\">\n                <input\n                  type=\"checkbox\"\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  checked={formData.noNextReview || false}\n                  onChange={(e) => setFormData(prev => ({\n                    ...prev,\n                    noNextReview: e.target.checked,\n                    nextReviewDate: e.target.checked ? null : prev.nextReviewDate\n                  }))}\n                />\n                <span className=\"text-sm text-gray-700\">Não agendar revisão</span>\n              </label>\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <button\n                type=\"button\"\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                onClick={onClose}\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                {editingSession ? 'Salvar Alterações' : 'Registrar Sessão'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Eye, Edit2 } from 'lucide-react';\n\nexport const SubjectsOverview = ({\n  subjects,\n  syllabusItems,\n  setSyllabusItems,\n  expandedSubjects,\n  setExpandedSubjects,\n  getSubjectStudyTime,\n  setSelectedSyllabusItem,\n  setIsItemDetailsModalOpen,\n  studySessions\n}) => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const [editingItem, setEditingItem] = useState(null);\n  const [tempAccuracy, setTempAccuracy] = useState('');\n  const [tempWeight, setTempWeight] = useState('');\n\n  const getAccuracyColor = (accuracy) => {\n    if (accuracy >= 80) return '#10b981'; // Verde\n    if (accuracy >= 60) return '#f59e0b'; // Amarelo\n    if (accuracy >= 40) return '#f97316'; // Laranja\n    return '#ef4444'; // Vermelho\n  };\n\n  const getWeightColor = (weight) => {\n    const intensity = Math.min(weight / 100, 1);\n    return `rgba(239, 68, 68, ${0.2 + intensity * 0.6})`; // Vermelho com intensidade baseada no peso\n  };\n\n  const calculateNextReviewDate = (accuracy) => {\n    const today = new Date();\n    let daysToAdd = 1;\n\n    if (accuracy >= 90) {\n      daysToAdd = 7; // 1 semana\n    } else if (accuracy >= 80) {\n      daysToAdd = 5; // 5 dias\n    } else if (accuracy >= 70) {\n      daysToAdd = 3; // 3 dias\n    } else if (accuracy >= 60) {\n      daysToAdd = 2; // 2 dias\n    } else {\n      daysToAdd = 1; // 1 dia\n    }\n\n    today.setDate(today.getDate() + daysToAdd);\n    return today.toISOString().split('T')[0];\n  };\n\n  // Calcular percentual de acerto baseado nas sessões\n  const getItemAccuracyFromSessions = (itemId) => {\n    if (!studySessions) return null;\n\n    const itemSessions = studySessions.filter(session =>\n      session.syllabusItemId === itemId &&\n      session.accuracy !== undefined &&\n      session.accuracy !== null\n    );\n\n    if (itemSessions.length === 0) return null;\n\n    // Usar a média dos percentuais de acerto das sessões\n    const totalAccuracy = itemSessions.reduce((sum, session) => sum + session.accuracy, 0);\n    return Math.round(totalAccuracy / itemSessions.length);\n  };\n\n  const handleSaveAccuracy = (itemId) => {\n    const accuracy = parseFloat(tempAccuracy);\n\n    if (accuracy >= 0 && accuracy <= 100) {\n      const nextReviewDate = calculateNextReviewDate(accuracy);\n\n      const updatedItems = syllabusItems.map(item =>\n        item.id === itemId\n          ? {\n              ...item,\n              accuracy: accuracy,\n              lastAccuracyUpdate: new Date().toISOString(),\n              nextReviewDate: nextReviewDate,\n              isStudied: true\n            }\n          : item\n      );\n      setSyllabusItems(updatedItems);\n      // Salvar no localStorage\n      localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n    }\n\n    setEditingItem(null);\n    setTempAccuracy('');\n    setTempWeight('');\n  };\n\n  const handleSaveWeight = (itemId) => {\n    const weight = parseFloat(tempWeight);\n\n    if (weight >= 0 && weight <= 100) {\n      const updatedItems = syllabusItems.map(item =>\n        item.id === itemId\n          ? {\n              ...item,\n              weight: weight\n            }\n          : item\n      );\n      setSyllabusItems(updatedItems);\n      // Salvar no localStorage\n      localStorage.setItem('syllabusItems', JSON.stringify(updatedItems));\n    }\n\n    setEditingItem(null);\n    setTempAccuracy('');\n    setTempWeight('');\n  };\n\n  const filterItems = (items, subjectId) => {\n    const filter = activeFilters[subjectId] || 'todos';\n\n    switch (filter) {\n      case 'nao-estudados':\n        return items.filter(item => !item.isStudied);\n      case 'com-revisao':\n        return items.filter(item => item.isStudied && item.accuracy >= 0);\n      case 'estudados-sem-revisao':\n        return items.filter(item => item.isStudied && (item.accuracy === undefined || item.accuracy < 0));\n      default:\n        return items;\n    }\n  };\n\n  // Função para detectar se um item é uma submatéria\n  const isSubItem = (itemName) => {\n    if (!itemName || typeof itemName !== 'string') return false;\n    // Detectar itens que começam com \" - \" ou números seguidos de ponto (ex: \"1.1\", \"2.3\")\n    return itemName.startsWith(' - ') ||\n           itemName.startsWith('- ') ||\n           /^\\d+\\.\\d+/.test(itemName.trim());\n  };\n\n  // Função para detectar nível de hierarquia baseado na numeração\n  const getHierarchyLevel = (itemName) => {\n    if (!itemName || typeof itemName !== 'string') return 0;\n\n    const trimmed = itemName.trim();\n\n    // Detectar itens que começam com \" - \" ou \"- \"\n    if (trimmed.startsWith('- ') || itemName.startsWith(' - ')) {\n      return 1;\n    }\n\n    // Detectar numeração (ex: \"1.\", \"1.1\", \"1.1.1\")\n    const numberMatch = trimmed.match(/^(\\d+\\.)+/);\n    if (numberMatch) {\n      const dots = (numberMatch[0].match(/\\./g) || []).length;\n      return dots > 1 ? dots - 1 : 0; // 1. = nível 0, 1.1 = nível 1, 1.1.1 = nível 2\n    }\n\n    return 0;\n  };\n\n  return (\n    <div className=\"subjects-overview-new\">\n      {subjects.map(subject => {\n        const subjectSyllabusItems = syllabusItems.filter(item => item.subjectId === subject.id);\n        const filteredItems = filterItems(subjectSyllabusItems, subject.id);\n        const studiedItems = subjectSyllabusItems.filter(item => item.isStudied);\n        const studiedPercentage = subjectSyllabusItems.length > 0\n          ? (studiedItems.length / subjectSyllabusItems.length) * 100\n          : 0;\n        const totalStudyTime = getSubjectStudyTime(subject.id);\n        const averageAccuracy = studiedItems.length > 0\n          ? studiedItems.reduce((sum, item) => sum + (item.accuracy || 0), 0) / studiedItems.length\n          : 0;\n        const isExpanded = expandedSubjects[subject.id];\n\n        return (\n          <div key={subject.id} className=\"subject-overview-new\">\n            <div className=\"subject-header-new\">\n              <div className=\"subject-info\">\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>\n                  <h3 className=\"subject-name\" style={{ margin: 0 }}>{subject.name}</h3>\n                  <button\n                    className=\"expand-btn\"\n                    onClick={() => {\n                      const newExpanded = { ...expandedSubjects };\n                      newExpanded[subject.id] = !newExpanded[subject.id];\n                      setExpandedSubjects(newExpanded);\n                    }}\n                  >\n                    {isExpanded ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n                  </button>\n                </div>\n\n                {isExpanded && (\n                  <>\n                    <div className=\"subject-stats-compact\" style={{\n                      marginBottom: '6px',\n                      fontSize: '0.7rem',\n                      color: '#64748b',\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      gap: '6px',\n                      alignItems: 'center'\n                    }}>\n                      <span style={{\n                        background: '#f1f5f9',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontWeight: '500',\n                        fontSize: '0.65rem'\n                      }}>\n                        {studiedItems.length} de {subjectSyllabusItems.length} itens ({studiedPercentage.toFixed(0)}%)\n                      </span>\n                      <span style={{\n                        background: '#f1f5f9',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontWeight: '500',\n                        fontSize: '0.65rem'\n                      }}>\n                        Média: {averageAccuracy.toFixed(0)}%\n                      </span>\n                      <span style={{\n                        background: '#f1f5f9',\n                        padding: '2px 6px',\n                        borderRadius: '3px',\n                        fontWeight: '500',\n                        fontSize: '0.65rem'\n                      }}>\n                        {totalStudyTime.toFixed(1)}h estudadas\n                      </span>\n                    </div>\n\n                    <div className=\"subject-controls\" style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      marginBottom: '6px'\n                    }}>\n                      <div className=\"filter-tabs\" style={{ display: 'flex', gap: '3px' }}>\n                        <button\n                          className={`filter-tab ${(!activeFilters[subject.id] || activeFilters[subject.id] === 'todos') ? 'active' : ''}`}\n                          onClick={() => setActiveFilters(prev => ({ ...prev, [subject.id]: 'todos' }))}\n                          style={{\n                            fontSize: '0.65rem',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            border: 'none',\n                            background: (!activeFilters[subject.id] || activeFilters[subject.id] === 'todos') ? '#3b82f6' : '#e2e8f0',\n                            color: (!activeFilters[subject.id] || activeFilters[subject.id] === 'todos') ? 'white' : '#64748b',\n                            cursor: 'pointer',\n                            fontWeight: '500'\n                          }}\n                        >\n                          Todos\n                        </button>\n                        <button\n                          className={`filter-tab ${activeFilters[subject.id] === 'nao-estudados' ? 'active' : ''}`}\n                          onClick={() => setActiveFilters(prev => ({ ...prev, [subject.id]: 'nao-estudados' }))}\n                          style={{\n                            fontSize: '0.65rem',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            border: 'none',\n                            background: activeFilters[subject.id] === 'nao-estudados' ? '#3b82f6' : '#e2e8f0',\n                            color: activeFilters[subject.id] === 'nao-estudados' ? 'white' : '#64748b',\n                            cursor: 'pointer',\n                            fontWeight: '500'\n                          }}\n                        >\n                          Não Estudados\n                        </button>\n                        <button\n                          className={`filter-tab ${activeFilters[subject.id] === 'com-revisao' ? 'active' : ''}`}\n                          onClick={() => setActiveFilters(prev => ({ ...prev, [subject.id]: 'com-revisao' }))}\n                          style={{\n                            fontSize: '0.65rem',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            border: 'none',\n                            background: activeFilters[subject.id] === 'com-revisao' ? '#3b82f6' : '#e2e8f0',\n                            color: activeFilters[subject.id] === 'com-revisao' ? 'white' : '#64748b',\n                            cursor: 'pointer',\n                            fontWeight: '500'\n                          }}\n                        >\n                          Com Revisão\n                        </button>\n                        <button\n                          className={`filter-tab ${activeFilters[subject.id] === 'estudados-sem-revisao' ? 'active' : ''}`}\n                          onClick={() => setActiveFilters(prev => ({ ...prev, [subject.id]: 'estudados-sem-revisao' }))}\n                          style={{\n                            fontSize: '0.65rem',\n                            padding: '2px 6px',\n                            borderRadius: '3px',\n                            border: 'none',\n                            background: activeFilters[subject.id] === 'estudados-sem-revisao' ? '#3b82f6' : '#e2e8f0',\n                            color: activeFilters[subject.id] === 'estudados-sem-revisao' ? 'white' : '#64748b',\n                            cursor: 'pointer',\n                            fontWeight: '500'\n                          }}\n                        >\n                          Estudados ({studiedPercentage.toFixed(0)}% Rev.)\n                        </button>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n\n            {isExpanded && (\n              <div className=\"subject-content-new\">\n                {filteredItems.length === 0 ? (\n                  <div className=\"no-items\">\n                    Nenhum item corresponde ao filtro selecionado.\n                  </div>\n                ) : (\n                  <div className=\"syllabus-items-list\">\n                    {filteredItems.map(item => {\n                      const hierarchyLevel = getHierarchyLevel(item.name);\n                      const isSubItemFlag = isSubItem(item.name);\n\n                      return (\n                        <div\n                          key={item.id}\n                          className=\"syllabus-item-row\"\n                          style={{\n                            backgroundColor: item.weight ? getWeightColor(item.weight) : undefined,\n                            marginLeft: `${hierarchyLevel * 20}px`, // Recuo de 20px por nível\n                            borderLeft: isSubItemFlag ? '3px solid rgba(59, 130, 246, 0.3)' : 'none',\n                            paddingLeft: isSubItemFlag ? '12px' : '8px'\n                          }}\n                        >\n                          <div className=\"item-content\" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n                            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                              <span\n                                className=\"item-name\"\n                                style={{\n                                  fontSize: isSubItemFlag ? '0.85rem' : '0.9rem',\n                                  fontWeight: isSubItemFlag ? '400' : '500',\n                                  color: isSubItemFlag ? '#94a3b8' : '#e2e8f0'\n                                }}\n                              >\n                                {item.name}\n                              </span>\n\n                            <div className=\"item-stats\" style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                            {(() => {\n                              // Priorizar percentual de acerto das sessões, depois o manual\n                              const sessionAccuracy = getItemAccuracyFromSessions(item.id);\n                              const displayAccuracy = sessionAccuracy !== null ? sessionAccuracy : item.accuracy;\n\n                              return displayAccuracy !== undefined && (\n                                <div\n                                  className=\"accuracy-triangle\"\n                                  style={{\n                                    backgroundColor: getAccuracyColor(displayAccuracy),\n                                    color: 'white',\n                                    padding: '2px 6px',\n                                    borderRadius: '4px',\n                                    fontSize: '0.7rem',\n                                    fontWeight: 'bold',\n                                    marginRight: '8px'\n                                  }}\n                                  title={sessionAccuracy !== null ? 'Baseado nas sessões de estudo' : 'Definido manualmente'}\n                                >\n                                  {displayAccuracy}%\n                                </div>\n                              );\n                            })()}\n\n                              {item.weight !== undefined && (\n                                <div\n                                  style={{\n                                    fontSize: '0.7rem',\n                                    color: '#94a3b8'\n                                  }}\n                                >\n                                  Peso: {item.weight}%\n                                </div>\n                              )}\n                            </div>\n                          </div>\n\n                          <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                            <button\n                              className=\"details-btn\"\n                              onClick={() => {\n                                setSelectedSyllabusItem(item);\n                                setIsItemDetailsModalOpen(true);\n                              }}\n                              title=\"Histórico de Item\"\n                            >\n                              <Eye size={12} />\n                            </button>\n\n                            <button\n                              className=\"details-btn\"\n                              onClick={() => {\n                                setEditingItem(item.id);\n                                setTempAccuracy(item.accuracy?.toString() || '');\n                                setTempWeight(item.weight?.toString() || '');\n                              }}\n                              title=\"Editar % Acerto e Peso\"\n                            >\n                              <Edit2 size={12} />\n                            </button>\n                          </div>\n                        </div>\n\n                        {editingItem === item.id && (\n                          <div className=\"edit-controls\" style={{\n                            marginTop: '8px',\n                            padding: '8px',\n                            background: 'rgba(15, 23, 42, 0.8)',\n                            borderRadius: '6px',\n                            display: 'flex',\n                            gap: '8px',\n                            alignItems: 'center',\n                            flexWrap: 'wrap'\n                          }}>\n                            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                              <label style={{ fontSize: '0.8rem', color: '#cbd5e1' }}>% Acerto:</label>\n                              <input\n                                type=\"number\"\n                                value={tempAccuracy}\n                                onChange={(e) => setTempAccuracy(e.target.value)}\n                                className=\"accuracy-input\"\n                                style={{ width: '60px' }}\n                                min=\"0\"\n                                max=\"100\"\n                                placeholder=\"0-100\"\n                              />\n                            </div>\n\n                            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                              <label style={{ fontSize: '0.8rem', color: '#cbd5e1' }}>% Peso:</label>\n                              <input\n                                type=\"number\"\n                                value={tempWeight}\n                                onChange={(e) => setTempWeight(e.target.value)}\n                                className=\"accuracy-input\"\n                                style={{ width: '60px' }}\n                                min=\"0\"\n                                max=\"100\"\n                                placeholder=\"0-100\"\n                              />\n                            </div>\n\n                            <button\n                              className=\"save-btn\"\n                              onClick={() => handleSaveAccuracy(item.id)}\n                              style={{ fontSize: '0.7rem', padding: '4px 8px' }}\n                              disabled={!tempAccuracy}\n                            >\n                              Salvar %\n                            </button>\n\n                            <button\n                              className=\"save-btn\"\n                              onClick={() => handleSaveWeight(item.id)}\n                              style={{ fontSize: '0.7rem', padding: '4px 8px', background: '#059669' }}\n                              disabled={!tempWeight}\n                            >\n                              Salvar Peso\n                            </button>\n\n                            <button\n                              className=\"save-btn\"\n                              onClick={() => {\n                                setEditingItem(null);\n                                setTempAccuracy('');\n                                setTempWeight('');\n                              }}\n                              style={{\n                                fontSize: '0.7rem',\n                                padding: '4px 8px',\n                                background: '#6b7280'\n                              }}\n                            >\n                              Cancelar\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    );\n                    })}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  BookOpen,\n  PlusCircle,\n  PlayCircle,\n  ListChecks,\n  Edit3,\n  Trash2,\n  CheckCircle,\n  Edit,\n  History\n} from 'lucide-react';\n\nexport const SubjectsManagement = ({\n  subjects,\n  studySessions,\n  setIsSubjectModalOpen,\n  setCurrentSubjectForSession,\n  setIsSessionModalOpen,\n  setCurrentSubjectForSyllabus,\n  setIsSyllabusModalOpen,\n  setEditingSubject,\n  setConfirmationDialog,\n  handleDeleteSubject,\n  getSubjectStudyTime,\n  calculateSubjectProgress,\n  setIsSessionHistoryModalOpen,\n  setSelectedSubjectForHistory\n}) => {\n  return (\n    <div className=\"card\">\n      <div className=\"subject-overview-header\">\n        <h2>\n          <BookOpen size={20} />\n          Matérias (Gerenciamento)\n        </h2>\n        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => setIsSubjectModalOpen(true)}\n          >\n            <PlusCircle size={14} />\n            Nova Matéria\n          </button>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => {\n              setCurrentSubjectForSession(null);\n              setIsSessionModalOpen(true);\n            }}\n          >\n            <PlayCircle size={14} />\n            Registrar Sessão\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-2\">\n        {subjects.map(subject => (\n          <div key={subject.id} className=\"subject-card\">\n            <div className=\"subject-header\">\n              <div className=\"subject-title\">{subject.name}</div>\n            </div>\n\n            <div style={{ marginBottom: '12px' }}>\n              <div style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                marginBottom: '8px'\n              }}>\n                <span style={{ fontSize: '0.9rem', color: '#e2e8f0' }}>\n                  Horas Estudadas: {getSubjectStudyTime(subject.id).toFixed(1)}h\n                </span>\n                <span style={{ fontSize: '0.9rem', color: '#e2e8f0' }}>\n                  Sessões: {studySessions.filter(s => s.subjectId === subject.id).length}\n                </span>\n              </div>\n              <div className=\"progress-bar\">\n                <div\n                  className=\"progress-fill\"\n                  style={{ width: `${calculateSubjectProgress(subject.id)}%` }}\n                />\n              </div>\n              <div style={{ fontSize: '0.8rem', color: '#94a3b8', marginTop: '4px' }}>\n                Progresso do Edital: {calculateSubjectProgress(subject.id)}%\n              </div>\n            </div>\n\n            <div style={{ display: 'flex', gap: '6px', flexWrap: 'wrap' }}>\n              <button\n                className=\"btn btn-success\"\n                style={{ fontSize: '0.75rem', padding: '6px 10px' }}\n                onClick={() => {\n                  setCurrentSubjectForSession(subject.id);\n                  setIsSessionModalOpen(true);\n                }}\n              >\n                <CheckCircle size={12} />\n                Sessão\n              </button>\n              <button\n                className=\"btn btn-info\"\n                style={{ fontSize: '0.75rem', padding: '6px 10px' }}\n                onClick={() => {\n                  setCurrentSubjectForSyllabus(subject);\n                  setIsSyllabusModalOpen(true);\n                }}\n              >\n                <ListChecks size={12} />\n                Edital\n              </button>\n              <button\n                className=\"btn btn-secondary\"\n                style={{ fontSize: '0.75rem', padding: '6px 10px' }}\n                onClick={() => {\n                  setSelectedSubjectForHistory && setSelectedSubjectForHistory(subject);\n                  setIsSessionHistoryModalOpen && setIsSessionHistoryModalOpen(true);\n                }}\n              >\n                <History size={12} />\n                Histórico\n              </button>\n              <button\n                className=\"btn btn-warning\"\n                style={{ fontSize: '0.75rem', padding: '6px 10px' }}\n                onClick={() => {\n                  setEditingSubject(subject);\n                  setIsSubjectModalOpen(true);\n                }}\n              >\n                <Edit size={12} />\n                Editar\n              </button>\n              <button\n                className=\"btn btn-danger\"\n                style={{ fontSize: '0.75rem', padding: '6px 10px' }}\n                onClick={() => {\n                  setConfirmationDialog({\n                    isOpen: true,\n                    title: 'Confirmar Exclusão',\n                    message: `Tem certeza que deseja deletar a matéria \"${subject.name}\"? Todos os dados relacionados serão perdidos.`,\n                    onConfirm: () => {\n                      handleDeleteSubject(subject.id);\n                      setConfirmationDialog({ isOpen: false, title: '', message: '', onConfirm: () => {} });\n                    }\n                  });\n                }}\n              >\n                <Trash2 size={12} />\n                Deletar\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Users,\n  PlusCircle,\n  Edit2,\n  Trash2,\n  BarChart3,\n  Download,\n  Upload,\n  BookOpen,\n  Edit,\n  Plus\n} from 'lucide-react';\n\nexport const ProfileSection = ({ \n  studyProfiles,\n  activeProfileId,\n  setActiveProfileId,\n  setIsProfileModalOpen,\n  setEditingProfile,\n  setConfirmationDialog,\n  handleDeleteProfile\n}) => {\n  return (\n    <div className=\"profile-section\">\n      <div className=\"profile-header\">\n        <div className=\"profile-title\">\n          <Users size={20} />\n          <span>Perfis de Concurso</span>\n        </div>\n        <button\n          className=\"btn btn-primary btn-sm\"\n          onClick={() => setIsProfileModalOpen(true)}\n        >\n          <PlusCircle size={14} />\n          Novo Perfil\n        </button>\n      </div>\n\n      {studyProfiles.length === 0 ? (\n        <div className=\"profile-empty\">\n          <span>Nenhum perfil criado.</span>\n          <button\n            className=\"btn btn-primary btn-sm\"\n            onClick={() => setIsProfileModalOpen(true)}\n          >\n            Criar Primeiro Perfil\n          </button>\n        </div>\n      ) : (\n        <div className=\"profile-content\">\n          <div className=\"profile-selector\">\n            <label>Concurso Ativo:</label>\n            <select\n              value={activeProfileId || ''}\n              onChange={(e) => setActiveProfileId(e.target.value)}\n              className=\"profile-dropdown\"\n            >\n              <option value=\"\">Selecione um perfil</option>\n              {studyProfiles.map(profile => (\n                <option key={profile.id} value={profile.id}>\n                  {profile.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {activeProfileId && (\n            <div className=\"profile-actions\">\n              <button\n                className=\"btn btn-secondary btn-sm\"\n                onClick={() => {\n                  const profile = studyProfiles.find(p => p.id === activeProfileId);\n                  if (profile) {\n                    setEditingProfile(profile);\n                    setIsProfileModalOpen(true);\n                  }\n                }}\n              >\n                <Edit2 size={14} />\n                Editar\n              </button>\n              <button\n                className=\"btn btn-danger btn-sm\"\n                onClick={() => {\n                  setConfirmationDialog({\n                    isOpen: true,\n                    title: 'Confirmar Exclusão',\n                    message: 'Tem certeza que deseja deletar este perfil? Todos os dados relacionados serão perdidos.',\n                    onConfirm: () => {\n                      handleDeleteProfile(activeProfileId);\n                      setConfirmationDialog({ isOpen: false, title: '', message: '', onConfirm: () => {} });\n                    }\n                  });\n                }}\n              >\n                <Trash2 size={14} />\n                Deletar\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const AppHeader = ({\n  setIsProgressReportModalOpen,\n  handleExportData,\n  handleImportData,\n  studyProfiles,\n  activeProfileId,\n  setActiveProfileId,\n  onOpenProfileModal\n}) => {\n  return (\n    <div className=\"app-header-unified\">\n      <div className=\"header-main-section\">\n        {/* Logo e Título */}\n        <div className=\"header-brand\">\n          <div className=\"brand-icon\">\n            <BookOpen size={24} color=\"white\" />\n          </div>\n          <div className=\"brand-text\">\n            <h1 className=\"brand-title\">📚 Organizador de Estudos</h1>\n            <p className=\"brand-subtitle\">Seu painel para conquistar os concursos!</p>\n          </div>\n        </div>\n\n        {/* Controles de Ação */}\n        <div className=\"header-actions\">\n          <button\n            onClick={() => setIsProgressReportModalOpen(true)}\n            className=\"action-btn primary\"\n            title=\"Relatório (Ctrl+R)\"\n          >\n            <BarChart3 size={16} />\n            <span>Relatório</span>\n          </button>\n\n          <button\n            onClick={handleExportData}\n            className=\"action-btn secondary\"\n            title=\"Exportar (Ctrl+E)\"\n          >\n            <Download size={16} />\n            <span>Exportar</span>\n          </button>\n\n          <label className=\"action-btn secondary\" style={{ cursor: 'pointer' }} title=\"Importar dados\">\n            <Upload size={16} />\n            <span>Importar</span>\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={(e) => {\n                const file = e.target.files[0];\n                if (file) {\n                  handleImportData(file);\n                }\n              }}\n              style={{ display: 'none' }}\n            />\n          </label>\n        </div>\n      </div>\n\n      {/* Seção de Perfil */}\n      <div className=\"header-profile-section\">\n        <div className=\"profile-controls\">\n          <div className=\"profile-selector\">\n            <Users size={16} className=\"profile-icon\" />\n            <span className=\"profile-label\">Concurso:</span>\n            {studyProfiles && studyProfiles.length > 0 ? (\n              <select\n                value={activeProfileId || ''}\n                onChange={(e) => setActiveProfileId(e.target.value)}\n                className=\"profile-select\"\n              >\n                {studyProfiles.map(p => (\n                  <option key={p.id} value={p.id}>{p.name}</option>\n                ))}\n              </select>\n            ) : (\n              <span className=\"no-profile\">Nenhum concurso criado</span>\n            )}\n          </div>\n\n          <div className=\"profile-actions\">\n            <button\n              onClick={onOpenProfileModal}\n              className=\"profile-btn edit\"\n              title=\"Gerenciar Concursos\"\n            >\n              <Edit size={14} />\n              <span>Editar</span>\n            </button>\n\n            <button\n              onClick={onOpenProfileModal}\n              className=\"profile-btn create\"\n              title=\"Novo Concurso (Ctrl+N)\"\n            >\n              <Plus size={14} />\n              <span>Novo</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"connection-status\">\n          <div className=\"status-indicator\">\n            <div className=\"status-dot\"></div>\n            <span>Firebase Conectado</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon } from 'lucide-react';\n\nexport const Calendar = ({ \n  studySessions, \n  syllabusItems,\n  onDateClick \n}) => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const today = new Date();\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n\n  // Primeiro dia do mês e quantos dias tem o mês\n  const firstDayOfMonth = new Date(year, month, 1);\n  const lastDayOfMonth = new Date(year, month + 1, 0);\n  const daysInMonth = lastDayOfMonth.getDate();\n  const startingDayOfWeek = firstDayOfMonth.getDay();\n\n  // Navegar entre meses\n  const goToPreviousMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n\n  const goToNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n\n  // Verificar se há sessões ou revisões em uma data\n  const getDateInfo = (day) => {\n    const dateStr = new Date(year, month, day).toISOString().split('T')[0];\n    \n    const sessionsOnDate = studySessions.filter(session => \n      session.date === dateStr\n    );\n\n    const reviewsOnDate = syllabusItems.filter(item => \n      item.nextReviewDate === dateStr\n    );\n\n    return {\n      hasSessions: sessionsOnDate.length > 0,\n      hasReviews: reviewsOnDate.length > 0,\n      sessionsCount: sessionsOnDate.length,\n      reviewsCount: reviewsOnDate.length,\n      totalHours: sessionsOnDate.reduce((total, session) => total + (session.duration || 0), 0) / 60\n    };\n  };\n\n  // Verificar se é hoje\n  const isToday = (day) => {\n    return today.getDate() === day && \n           today.getMonth() === month && \n           today.getFullYear() === year;\n  };\n\n  // Gerar array de dias\n  const days = [];\n  \n  // Dias vazios do início\n  for (let i = 0; i < startingDayOfWeek; i++) {\n    days.push(null);\n  }\n  \n  // Dias do mês\n  for (let day = 1; day <= daysInMonth; day++) {\n    days.push(day);\n  }\n\n  const monthNames = [\n    'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',\n    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'\n  ];\n\n  const dayNames = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];\n\n  return (\n    <div className=\"calendar-container\">\n      <div className=\"calendar-header\">\n        <div className=\"calendar-title\">\n          <CalendarIcon size={16} />\n          <span>Calendário de Estudos</span>\n        </div>\n        \n        <div className=\"calendar-navigation\">\n          <button \n            className=\"calendar-nav-btn\"\n            onClick={goToPreviousMonth}\n          >\n            <ChevronLeft size={16} />\n          </button>\n          \n          <span className=\"calendar-month-year\">\n            {monthNames[month]} {year}\n          </span>\n          \n          <button \n            className=\"calendar-nav-btn\"\n            onClick={goToNextMonth}\n          >\n            <ChevronRight size={16} />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"calendar-grid\">\n        {/* Cabeçalho dos dias da semana */}\n        {dayNames.map(dayName => (\n          <div key={dayName} className=\"calendar-day-header\">\n            {dayName}\n          </div>\n        ))}\n\n        {/* Dias do mês */}\n        {days.map((day, index) => {\n          if (day === null) {\n            return <div key={`empty-${index}`} className=\"calendar-day-empty\" />;\n          }\n\n          const dateInfo = getDateInfo(day);\n          const isCurrentDay = isToday(day);\n\n          return (\n            <div\n              key={`day-${day}-${month}-${year}`}\n              className={`calendar-day ${isCurrentDay ? 'today' : ''} ${\n                dateInfo.hasSessions || dateInfo.hasReviews ? 'has-events' : ''\n              }`}\n              onClick={() => onDateClick && onDateClick(new Date(year, month, day))}\n            >\n              <span className=\"calendar-day-number\">{day}</span>\n              \n              {/* Indicadores */}\n              <div className=\"calendar-day-indicators\">\n                {dateInfo.hasSessions && (\n                  <div \n                    className=\"calendar-indicator study\"\n                    title={`${dateInfo.sessionsCount} sessão(ões) - ${dateInfo.totalHours.toFixed(1)}h`}\n                  >\n                    {dateInfo.sessionsCount}\n                  </div>\n                )}\n                {dateInfo.hasReviews && (\n                  <div \n                    className=\"calendar-indicator review\"\n                    title={`${dateInfo.reviewsCount} revisão(ões) agendada(s)`}\n                  >\n                    R\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Legenda */}\n      <div className=\"calendar-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color study\"></div>\n          <span>Sessões de Estudo</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color review\"></div>\n          <span>Revisões Agendadas</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color today\"></div>\n          <span>Hoje</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/**\n * Utility functions for localStorage operations\n */\n\n/**\n * Save data to localStorage\n * @param {string} key - Storage key\n * @param {any} data - Data to save\n * @returns {boolean} Success status\n */\nexport const saveToLocalStorage = (key, data) => {\n  try {\n    const serializedData = JSON.stringify(data);\n    localStorage.setItem(key, serializedData);\n    return true;\n  } catch (error) {\n    console.error('Erro ao salvar no localStorage:', error);\n    return false;\n  }\n};\n\n/**\n * Load data from localStorage\n * @param {string} key - Storage key\n * @param {any} defaultValue - Default value if key doesn't exist\n * @returns {any} Loaded data or default value\n */\nexport const loadFromLocalStorage = (key, defaultValue = null) => {\n  try {\n    const serializedData = localStorage.getItem(key);\n    if (serializedData === null) {\n      return defaultValue;\n    }\n    return JSON.parse(serializedData);\n  } catch (error) {\n    console.error('Erro ao carregar do localStorage:', error);\n    return defaultValue;\n  }\n};\n\n/**\n * Remove data from localStorage\n * @param {string} key - Storage key\n * @returns {boolean} Success status\n */\nexport const removeFromLocalStorage = (key) => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error('Erro ao remover do localStorage:', error);\n    return false;\n  }\n};\n\n/**\n * Clear all localStorage data\n * @returns {boolean} Success status\n */\nexport const clearLocalStorage = () => {\n  try {\n    localStorage.clear();\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar localStorage:', error);\n    return false;\n  }\n};\n\n/**\n * Check if localStorage is available\n * @returns {boolean} Availability status\n */\nexport const isLocalStorageAvailable = () => {\n  try {\n    const testKey = '__localStorage_test__';\n    localStorage.setItem(testKey, 'test');\n    localStorage.removeItem(testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Get localStorage usage information\n * @returns {Object} Usage information\n */\nexport const getLocalStorageInfo = () => {\n  if (!isLocalStorageAvailable()) {\n    return { available: false };\n  }\n\n  try {\n    let totalSize = 0;\n    const keys = [];\n    \n    for (let key in localStorage) {\n      if (localStorage.hasOwnProperty(key)) {\n        const value = localStorage.getItem(key);\n        totalSize += key.length + (value ? value.length : 0);\n        keys.push(key);\n      }\n    }\n\n    return {\n      available: true,\n      totalSize: totalSize,\n      totalSizeKB: (totalSize / 1024).toFixed(2),\n      keysCount: keys.length,\n      keys: keys\n    };\n  } catch (error) {\n    console.error('Erro ao obter informações do localStorage:', error);\n    return { available: true, error: error.message };\n  }\n};\n\n/**\n * Backup all localStorage data\n * @returns {Object} Backup data\n */\nexport const backupLocalStorage = () => {\n  try {\n    const backup = {};\n    for (let key in localStorage) {\n      if (localStorage.hasOwnProperty(key)) {\n        backup[key] = localStorage.getItem(key);\n      }\n    }\n    return {\n      timestamp: new Date().toISOString(),\n      data: backup\n    };\n  } catch (error) {\n    console.error('Erro ao fazer backup do localStorage:', error);\n    return null;\n  }\n};\n\n/**\n * Restore localStorage from backup\n * @param {Object} backup - Backup data\n * @returns {boolean} Success status\n */\nexport const restoreLocalStorage = (backup) => {\n  try {\n    if (!backup || !backup.data) {\n      throw new Error('Backup inválido');\n    }\n\n    // Clear existing data\n    localStorage.clear();\n\n    // Restore data\n    for (let key in backup.data) {\n      localStorage.setItem(key, backup.data[key]);\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Erro ao restaurar localStorage:', error);\n    return false;\n  }\n};\n\nexport default {\n  saveToLocalStorage,\n  loadFromLocalStorage,\n  removeFromLocalStorage,\n  clearLocalStorage,\n  isLocalStorageAvailable,\n  getLocalStorageInfo,\n  backupLocalStorage,\n  restoreLocalStorage\n};\n","import React, { useState, useEffect } from 'react';\nimport { PlusCircle, BarChart3, Eye } from 'lucide-react';\n\n// Importar componentes\nimport { ProfileModal, SubjectModal, ItemDetailsModal, SyllabusModal, ProgressReportModal, SessionHistoryModal } from './components/Modals';\nimport { SessionModal } from './components/SessionModal';\nimport { SubjectsOverview } from './components/SubjectsOverview';\nimport { SubjectsManagement } from './components/SubjectsManagement';\nimport { AppHeader, ProfileSection } from './components/Header';\nimport { Calendar } from './components/Calendar';\n\n// Importar serviços\nimport { saveToLocalStorage, loadFromLocalStorage } from './utils/localStorage';\n\nfunction App() {\n  // Estados principais\n  const [isLoading, setIsLoading] = useState(true);\n  const [toast, setToast] = useState({ message: '', type: '', isVisible: false });\n  const [confirmationDialog, setConfirmationDialog] = useState({\n    isOpen: false,\n    title: '',\n    message: '',\n    onConfirm: () => {}\n  });\n  const [expandedSubjects, setExpandedSubjects] = useState({});\n  const [selectedSyllabusItem, setSelectedSyllabusItem] = useState(null);\n  const [isItemDetailsModalOpen, setIsItemDetailsModalOpen] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('Carregando dados...');\n  const [currentView, setCurrentView] = useState('overview'); // 'overview', 'subjects', 'calendar', 'reports'\n\n  const [studyProfiles, setStudyProfiles] = useState([]);\n  const [activeProfileId, setActiveProfileId] = useState(null);\n  const [subjects, setSubjects] = useState([]);\n  const [studySessions, setStudySessions] = useState([]);\n  const [syllabusItems, setSyllabusItems] = useState([]);\n  // Simulados (objetivos e subjetivos)\n  const [simulados, setSimulados] = useState([]); // {id, profileId, tipo:'objetivo'|'subjetivo', data, quantidadeQuestoes, quantidadeObjetivasCorretas?, notaSubjetiva?, notaFinal, observacoes}\n  const [isSimuladoModalOpen, setIsSimuladoModalOpen] = useState(false);\n  const [editingSimulado, setEditingSimulado] = useState(null);\n  // Editais globais carregados da página admin\n  const [globalEditais, setGlobalEditais] = useState([]);\n  const [isImportEditalOpen, setIsImportEditalOpen] = useState(false);\n\n  // Estados dos modais\n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);\n  const [editingProfile, setEditingProfile] = useState(null);\n  const [isSubjectModalOpen, setIsSubjectModalOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState(null);\n  const [isSessionModalOpen, setIsSessionModalOpen] = useState(false);\n  const [editingSession, setEditingSession] = useState(null);\n  const [currentSubjectForSession, setCurrentSubjectForSession] = useState(null);\n  const [initialSessionData, setInitialSessionData] = useState(null);\n  const [isSyllabusModalOpen, setIsSyllabusModalOpen] = useState(false);\n  const [currentSubjectForSyllabus, setCurrentSubjectForSyllabus] = useState(null);\n  const [isProgressReportModalOpen, setIsProgressReportModalOpen] = useState(false);\n  const [isSessionHistoryModalOpen, setIsSessionHistoryModalOpen] = useState(false);\n  const [selectedSubjectForHistory, setSelectedSubjectForHistory] = useState(null);\n\n  // Handlers para os modais\n  const handleProfileSubmit = (formData) => {\n    if (editingProfile) {\n      handleUpdateProfile(editingProfile.id, formData);\n    } else {\n      handleCreateProfile(formData);\n    }\n  };\n\n  const handleSubjectSubmit = (formData) => {\n    if (editingSubject) {\n      handleUpdateSubject(editingSubject.id, formData);\n    } else {\n      handleCreateSubject(formData);\n    }\n  };\n\n  const handleSessionSubmit = (formData) => {\n    if (editingSession) {\n      handleUpdateSession(editingSession.id, formData);\n    } else {\n      handleCreateSession(formData);\n    }\n  };\n\n\n\n  // Funções auxiliares\n  const showToast = (message, type = 'info') => {\n    setToast({ message, type, isVisible: true });\n    setTimeout(() => {\n      setToast(prev => ({ ...prev, isVisible: false }));\n    }, 3000);\n  };\n\n  const getSubjectStudyTime = (subjectId) => {\n    return studySessions\n      .filter(session => session.subjectId === subjectId)\n      .reduce((total, session) => total + (session.duration || 0), 0) / 60;\n  };\n\n  const calculateSubjectProgress = (subjectId) => {\n    const subjectSyllabusItems = syllabusItems.filter(item => item.subjectId === subjectId);\n    const studiedItems = subjectSyllabusItems.filter(item => item.isStudied);\n    return subjectSyllabusItems.length > 0 ? (studiedItems.length / subjectSyllabusItems.length) * 100 : 0;\n  };\n\n  // Sistema de revisões melhorado\n  const calculateNextReviewDate = (lastStudyDate, accuracy) => {\n    const baseDate = new Date(lastStudyDate);\n    let daysToAdd = 1; // Padrão: revisar no dia seguinte\n\n    if (accuracy >= 90) {\n      daysToAdd = 7; // 1 semana\n    } else if (accuracy >= 80) {\n      daysToAdd = 5; // 5 dias\n    } else if (accuracy >= 70) {\n      daysToAdd = 3; // 3 dias\n    } else if (accuracy >= 60) {\n      daysToAdd = 2; // 2 dias\n    } else {\n      daysToAdd = 1; // 1 dia\n    }\n\n    baseDate.setDate(baseDate.getDate() + daysToAdd);\n    return baseDate.toISOString().split('T')[0];\n  };\n\n  const getUrgentReviews = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return syllabusItems.filter(item =>\n      item.nextReviewDate && item.nextReviewDate <= today\n    );\n  };\n\n  const getNextReviewDate = () => {\n    const urgentReviews = getUrgentReviews();\n    if (urgentReviews.length > 0) {\n      return 'Hoje';\n    }\n\n    const futureReviews = syllabusItems\n      .filter(item => item.nextReviewDate && item.nextReviewDate > new Date().toISOString().split('T')[0])\n      .sort((a, b) => new Date(a.nextReviewDate) - new Date(b.nextReviewDate));\n\n    if (futureReviews.length > 0) {\n      const nextDate = new Date(futureReviews[0].nextReviewDate);\n      return nextDate.toLocaleDateString('pt-BR');\n    }\n\n    return '-';\n  };\n\n  // Função para alterar perfil ativo\n  const handleSetActiveProfile = (profileId) => {\n    setActiveProfileId(profileId);\n    saveToLocalStorage('activeProfileId', profileId);\n  };\n\n  // Placeholder functions\n  const handleCreateProfile = (formData) => {\n    const newProfile = {\n      id: Date.now().toString(),\n      ...formData,\n      createdAt: new Date().toISOString()\n    };\n    const updatedProfiles = [...studyProfiles, newProfile];\n    setStudyProfiles(updatedProfiles);\n    setActiveProfileId(newProfile.id); // Selecionar automaticamente o novo perfil\n\n    // Salvar no localStorage\n    saveToLocalStorage('studyProfiles', updatedProfiles);\n    saveToLocalStorage('activeProfileId', newProfile.id);\n\n    setIsProfileModalOpen(false);\n    setEditingProfile(null);\n    showToast('Perfil criado e selecionado com sucesso!', 'success');\n  };\n\n  const handleUpdateProfile = (id, formData) => {\n    const updatedProfiles = studyProfiles.map(profile =>\n      profile.id === id ? { ...profile, ...formData } : profile\n    );\n    setStudyProfiles(updatedProfiles);\n\n    // Salvar no localStorage\n    saveToLocalStorage('studyProfiles', updatedProfiles);\n\n    setIsProfileModalOpen(false);\n    setEditingProfile(null);\n    showToast('Perfil atualizado com sucesso!', 'success');\n  };\n\n  const handleDeleteProfile = (id) => {\n    const updatedProfiles = studyProfiles.filter(profile => profile.id !== id);\n    setStudyProfiles(updatedProfiles);\n\n    let newActiveProfileId = activeProfileId;\n    if (activeProfileId === id) {\n      newActiveProfileId = updatedProfiles.length > 0 ? updatedProfiles[0].id : null;\n      setActiveProfileId(newActiveProfileId);\n    }\n\n    // Salvar no localStorage\n    saveToLocalStorage('studyProfiles', updatedProfiles);\n    saveToLocalStorage('activeProfileId', newActiveProfileId);\n\n    showToast('Perfil deletado com sucesso!', 'success');\n  };\n\n  const handleCreateSubject = (formData) => {\n    const newSubject = {\n      id: Date.now().toString(),\n      profileId: activeProfileId,\n      ...formData,\n      createdAt: new Date().toISOString()\n    };\n    const updatedSubjects = [...subjects, newSubject];\n    setSubjects(updatedSubjects);\n    saveToLocalStorage('subjects', updatedSubjects);\n    setIsSubjectModalOpen(false);\n    setEditingSubject(null);\n    showToast('Matéria criada com sucesso!', 'success');\n  };\n\n  const handleUpdateSubject = (id, formData) => {\n    const updatedSubjects = subjects.map(subject =>\n      subject.id === id ? { ...subject, ...formData } : subject\n    );\n    setSubjects(updatedSubjects);\n    saveToLocalStorage('subjects', updatedSubjects);\n    setIsSubjectModalOpen(false);\n    setEditingSubject(null);\n    showToast('Matéria atualizada com sucesso!', 'success');\n  };\n\n  const handleDeleteSubject = (id) => {\n    const updatedSubjects = subjects.filter(subject => subject.id !== id);\n    const updatedSyllabusItems = syllabusItems.filter(item => item.subjectId !== id);\n    const updatedSessions = studySessions.filter(session => session.subjectId !== id);\n\n    setSubjects(updatedSubjects);\n    setSyllabusItems(updatedSyllabusItems);\n    setStudySessions(updatedSessions);\n\n    saveToLocalStorage('subjects', updatedSubjects);\n    saveToLocalStorage('syllabusItems', updatedSyllabusItems);\n    saveToLocalStorage('sessions', updatedSessions);\n\n    showToast('Matéria deletada com sucesso!', 'success');\n  };\n\n  const handleCreateSession = (formData) => {\n    const newSession = {\n      id: Date.now().toString(),\n      profileId: activeProfileId,\n      ...formData,\n      createdAt: new Date().toISOString()\n    };\n    const updatedSessions = [...studySessions, newSession];\n    setStudySessions(updatedSessions);\n    saveToLocalStorage('sessions', updatedSessions);\n    setIsSessionModalOpen(false);\n    setEditingSession(null);\n    setCurrentSubjectForSession(null);\n    setInitialSessionData(null);\n    showToast('Sessão registrada com sucesso!', 'success');\n  };\n\n  const handleUpdateSession = (id, formData) => {\n    const updatedSessions = studySessions.map(session =>\n      session.id === id ? { ...session, ...formData } : session\n    );\n    setStudySessions(updatedSessions);\n    saveToLocalStorage('sessions', updatedSessions);\n    setIsSessionModalOpen(false);\n    setEditingSession(null);\n    setCurrentSubjectForSession(null);\n    setInitialSessionData(null);\n    showToast('Sessão atualizada com sucesso!', 'success');\n  };\n\n  const handleExportData = () => {\n    const data = {\n      studyProfiles,\n      subjects,\n      studySessions,\n  simulados,\n      syllabusItems,\n      exportDate: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `organizador-estudos-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    showToast('Dados exportados com sucesso!', 'success');\n  };\n\n  const handleImportData = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const backupData = JSON.parse(e.target.result);\n\n        // Validar estrutura do backup\n        if (!backupData.timestamp) {\n          throw new Error('Arquivo de backup inválido');\n        }\n\n        // Mostrar aviso sobre criação de novo concurso\n        setConfirmationDialog({\n          isOpen: true,\n          title: 'Importar Dados',\n          message: 'A importação criará um novo concurso com os dados do arquivo JSON. Os dados atuais serão preservados. Deseja continuar?',\n          onConfirm: () => {\n            try {\n              // Criar novo perfil com dados importados\n              if (backupData.studyProfiles && backupData.studyProfiles.length > 0) {\n                const importedProfile = backupData.studyProfiles[0];\n                const newProfile = {\n                  ...importedProfile,\n                  id: Date.now().toString(),\n                  name: `${importedProfile.name} (Importado)`\n                };\n\n                const updatedProfiles = [...studyProfiles, newProfile];\n                setStudyProfiles(updatedProfiles);\n                setActiveProfileId(newProfile.id);\n                saveToLocalStorage('studyProfiles', updatedProfiles);\n                saveToLocalStorage('activeProfileId', newProfile.id);\n\n                // Importar outros dados se existirem\n                if (backupData.subjects) {\n                  setSubjects(backupData.subjects);\n                  saveToLocalStorage('subjects', backupData.subjects);\n                }\n\n                if (backupData.sessions) {\n                  setStudySessions(backupData.sessions);\n                  saveToLocalStorage('sessions', backupData.sessions);\n                }\n\n                if (backupData.syllabusItems) {\n                  setSyllabusItems(backupData.syllabusItems);\n                  saveToLocalStorage('syllabusItems', backupData.syllabusItems);\n                }\n\n                showToast(\"Dados importados com sucesso! Novo concurso criado.\", \"success\");\n              } else {\n                showToast(\"Nenhum perfil encontrado no arquivo\", \"error\");\n              }\n            } catch (error) {\n              showToast(\"Erro ao processar dados importados\", \"error\");\n            }\n            setConfirmationDialog({ ...confirmationDialog, isOpen: false });\n          }\n        });\n      } catch (error) {\n        showToast('Erro ao ler arquivo JSON', 'error');\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Componente de Loading\n  const LoadingSpinner = () => (\n    <div className=\"loading-container\">\n      <div className=\"loading-spinner\" />\n      <p className=\"loading-message\">{loadingMessage}</p>\n      <div className=\"loading-progress\">\n        <div className=\"loading-bar\"></div>\n      </div>\n    </div>\n  );\n\n  // Componente de Breadcrumb\n  const Breadcrumb = () => {\n    const activeProfile = studyProfiles.find(p => p.id === activeProfileId);\n    const viewNames = {\n      overview: 'Visão Geral',\n      subjects: 'Matérias',\n      calendar: 'Calendário',\n      reports: 'Relatórios'\n    };\n\n    return (\n      <div className=\"breadcrumb\">\n        <span className=\"breadcrumb-item\">\n          📚 {activeProfile?.name || 'Nenhum Concurso'}\n        </span>\n        <span className=\"breadcrumb-separator\">›</span>\n        <span className=\"breadcrumb-item active\">\n          {viewNames[currentView]}\n        </span>\n      </div>\n    );\n  };\n\n  // Componente de Estatísticas Rápidas\n  const QuickStats = () => {\n    const totalSubjects = activeSubjects.length;\n    const totalItems = activeSyllabusItems.length;\n    const studiedItems = activeSyllabusItems.filter(item => item.isStudied).length;\n    const studiedPercentage = totalItems > 0 ? ((studiedItems / totalItems) * 100).toFixed(0) : 0;\n    const totalHours = activeSessions.reduce((sum, session) => sum + session.duration, 0);\n\n    return (\n      <div className=\"quick-stats\">\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{totalSubjects}</span>\n          <span className=\"stat-label\">Matérias</span>\n        </div>\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{studiedPercentage}%</span>\n          <span className=\"stat-label\">Progresso</span>\n        </div>\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{totalHours.toFixed(1)}h</span>\n          <span className=\"stat-label\">Estudadas</span>\n        </div>\n        <div className=\"stat-item\">\n          <span className=\"stat-value\">{studiedItems}/{totalItems}</span>\n          <span className=\"stat-label\">Itens</span>\n        </div>\n      </div>\n    );\n  };\n\n  // Componente de Toast Melhorado\n  const Toast = ({ message, type, isVisible }) => {\n    if (!isVisible) return null;\n\n    const icons = {\n      success: '✅',\n      error: '❌',\n      warning: '⚠️',\n      info: 'ℹ️'\n    };\n\n    return (\n      <div className={`toast toast-${type}`}>\n        <span className=\"toast-icon\">{icons[type] || icons.info}</span>\n        <span className=\"toast-message\">{message}</span>\n      </div>\n    );\n  };\n\n  // Componente de Confirmação\n  const ConfirmationDialog = ({ isOpen, title, message, onConfirm, onCancel }) => {\n    if (!isOpen) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={onCancel}>\n        <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n          <h2>{title}</h2>\n          <div className=\"p-6\">\n            <p style={{ color: '#e2e8f0', marginBottom: '20px' }}>{message}</p>\n            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px' }}>\n              <button className=\"btn btn-secondary\" onClick={onCancel}>\n                Cancelar\n              </button>\n              <button className=\"btn btn-danger\" onClick={onConfirm}>\n                Confirmar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Carregamento inicial com sistema duplo de armazenamento\n  // Atalhos de teclado\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      // Ctrl/Cmd + N = Novo Perfil\n      if ((e.ctrlKey || e.metaKey) && e.key === 'n') {\n        e.preventDefault();\n        setIsProfileModalOpen(true);\n      }\n      // Ctrl/Cmd + R = Relatório\n      if ((e.ctrlKey || e.metaKey) && e.key === 'r') {\n        e.preventDefault();\n        setIsProgressReportModalOpen(true);\n      }\n      // Ctrl/Cmd + E = Exportar\n      if ((e.ctrlKey || e.metaKey) && e.key === 'e') {\n        e.preventDefault();\n        handleExportData();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, []);\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        setIsLoading(true);\n        setLoadingMessage('Inicializando aplicativo...');\n\n        // Simular carregamento com mensagens\n        await new Promise(resolve => setTimeout(resolve, 300));\n        setLoadingMessage('Carregando perfis...');\n\n        // Carregar dados do localStorage\n        const savedProfiles = loadFromLocalStorage('studyProfiles') || [];\n        const savedActiveProfileId = loadFromLocalStorage('activeProfileId') || null;\n\n        await new Promise(resolve => setTimeout(resolve, 200));\n        setLoadingMessage('Carregando matérias...');\n        const savedSubjects = loadFromLocalStorage('subjects') || [];\n        const savedSessions = loadFromLocalStorage('sessions') || [];\n  const savedSyllabusItems = loadFromLocalStorage('syllabusItems') || [];\n  const savedSimulados = loadFromLocalStorage('simulados') || [];\n  const savedGlobalEditais = loadFromLocalStorage('globalEditais') || [];\n\n        // Carregar perfis\n        if (savedProfiles.length > 0) {\n          setStudyProfiles(savedProfiles);\n          // Definir perfil ativo\n          if (savedActiveProfileId && savedProfiles.some(p => p.id === savedActiveProfileId)) {\n            setActiveProfileId(savedActiveProfileId);\n          } else {\n            setActiveProfileId(savedProfiles[0].id);\n          }\n        }\n\n        // Se não há dados salvos, usar dados de exemplo\n        if (savedSubjects.length === 0) {\n          const demoSubjects = [\n            {\n              id: '1',\n              name: 'Matemática',\n              color: '#3B82F6',\n              weight: 3,\n              accuracy: 75,\n              syllabus: [\n                { id: '1', name: 'Álgebra', isCompleted: false },\n                { id: '2', name: 'Geometria', isCompleted: true },\n                { id: '3', name: 'Trigonometria', isCompleted: false }\n              ]\n            },\n            {\n              id: '2',\n              name: 'Português',\n              color: '#10B981',\n              weight: 2,\n              accuracy: 80,\n              syllabus: [\n                { id: '4', name: 'Gramática', isCompleted: true },\n                { id: '5', name: 'Literatura', isCompleted: false }\n              ]\n            }\n          ];\n\n          setSubjects(demoSubjects);\n          saveToLocalStorage('subjects', demoSubjects);\n        } else {\n          setSubjects(savedSubjects);\n        }\n\n        if (savedSessions.length === 0) {\n          const demoSessions = [\n            {\n              id: '1',\n              subjectId: '1',\n              subjectName: 'Matemática',\n              date: '2025-01-26',\n              duration: 2,\n              syllabusItemId: '1',\n              syllabusItemName: 'Álgebra',\n              accuracy: 75,\n              observations: 'Estudei equações do segundo grau'\n            }\n          ];\n\n          setStudySessions(demoSessions);\n          saveToLocalStorage('sessions', demoSessions);\n        } else {\n          setStudySessions(savedSessions);\n        }\n\n        // Carregar syllabusItems\n  setSyllabusItems(savedSyllabusItems);\n  setSimulados(savedSimulados);\n  setGlobalEditais(savedGlobalEditais);\n\n        setLoadingMessage('Finalizando...');\n        await new Promise(resolve => setTimeout(resolve, 200));\n\n      } catch (error) {\n        showToast('Erro ao carregar dados', 'error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeApp();\n  }, []);\n\n  // Filtrar dados por perfil ativo\n  const activeSubjects = subjects.filter(subject => subject.profileId === activeProfileId);\n  const activeSessions = studySessions.filter(session => session.profileId === activeProfileId);\n  const activeSimulados = simulados.filter(s => s.profileId === activeProfileId);\n  const activeSyllabusItems = syllabusItems.filter(item => \n    activeSubjects.some(subject => subject.id === item.subjectId)\n  );\n\n  // Renderização condicional baseada no estado de carregamento\n  if (isLoading) {\n    return (\n      <div className=\"app-container\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  // Interface principal\n  return (\n    <div className=\"app-container\">\n      {/* Header */}\n      <AppHeader\n        setIsProgressReportModalOpen={setIsProgressReportModalOpen}\n        handleExportData={handleExportData}\n        handleImportData={handleImportData}\n        studyProfiles={studyProfiles}\n        activeProfileId={activeProfileId}\n        setActiveProfileId={handleSetActiveProfile}\n        onOpenProfileModal={() => setIsProfileModalOpen(true)}\n      />\n\n      {/* Breadcrumb e Estatísticas */}\n      {activeProfileId && (\n        <div className=\"navigation-section\">\n          <Breadcrumb />\n          <QuickStats />\n        </div>\n      )}\n\n      {/* Conteúdo Principal */}\n      {!activeProfileId ? (\n        <div className=\"card\">\n          <div className=\"welcome-section\">\n            <h2>Bem-vindo ao Organizador de Estudos!</h2>\n            <p>Crie ou selecione um perfil de concurso para começar a organizar seus estudos.</p>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => setIsProfileModalOpen(true)}\n            >\n              <PlusCircle size={20} />\n              Criar Primeiro Perfil\n            </button>\n          </div>\n        </div>\n      ) : (\n        <>\n          {/* Estatísticas Rápidas */}\n          <div className=\"card\">\n            <h2>\n              <BarChart3 size={20} />\n              Estatísticas Rápidas\n            </h2>\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{activeSessions.reduce((total, session) => total + (session.duration || 0), 0) / 60}h</div>\n                <div className=\"stat-label\">Total Estudado</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{activeSessions.length}</div>\n                <div className=\"stat-label\">Sessões</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{activeSimulados.length}</div>\n                <div className=\"stat-label\">Simulados</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">\n                  {activeSyllabusItems.length > 0 \n                    ? (activeSyllabusItems.reduce((sum, item) => sum + (item.accuracy || 0), 0) / activeSyllabusItems.length).toFixed(0)\n                    : 0}%\n                </div>\n                <div className=\"stat-label\">Média de Acerto Geral</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{getNextReviewDate()}</div>\n                <div className=\"stat-label\">Próxima Revisão Urgente</div>\n              </div>\n            </div>\n            <div className=\"mt-4 flex flex-wrap gap-2\">\n              <button className=\"btn btn-primary\" onClick={()=>{setIsSimuladoModalOpen(true);}}>Registrar Simulado</button>\n              {globalEditais.length > 0 && activeSubjects.length > 0 && (\n                <button className=\"btn btn-secondary\" onClick={()=>setIsImportEditalOpen(true)}>Importar Itens de Edital</button>\n              )}\n            </div>\n\n            {/* Ciclo de Estudos Visual */}\n            {activeSubjects.length > 0 && (\n              <div className=\"study-cycle-indicator\">\n                <div className=\"study-cycle-header\">\n                  <span className=\"study-cycle-icon\">🔄</span>\n                  <span className=\"study-cycle-title\">Ciclo de Estudos Visual</span>\n                </div>\n                <div className=\"study-cycle-subjects\">\n                  {activeSubjects.map((subject, index) => (\n                    <div\n                      key={subject.id}\n                      className=\"study-cycle-item\"\n                      style={{\n                        backgroundColor: subject.color + '20',\n                        borderLeft: `3px solid ${subject.color}`\n                      }}\n                    >\n                      <span className=\"cycle-subject-name\">{subject.name}</span>\n                      <span className=\"cycle-subject-weight\">Peso: {subject.weight || 1}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {activeSubjects.length === 0 ? (\n            <div className=\"card\">\n              <div className=\"welcome-section\">\n                <h2>Nenhuma matéria cadastrada</h2>\n                <p>Adicione sua primeira matéria para começar a organizar seus estudos.</p>\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => setIsSubjectModalOpen(true)}\n                >\n                  <PlusCircle size={20} />\n                  Adicionar Primeira Matéria\n                </button>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Calendário de Estudos */}\n              <div className=\"card\">\n                <Calendar\n                  studySessions={activeSessions}\n                  syllabusItems={activeSyllabusItems}\n                  onDateClick={(date) => {\n                    // Aqui pode abrir um modal com detalhes do dia\n                  }}\n                />\n              </div>\n\n              {/* Matérias (Gerenciamento) */}\n              <SubjectsManagement\n                subjects={activeSubjects}\n                studySessions={activeSessions}\n                setIsSubjectModalOpen={setIsSubjectModalOpen}\n                setCurrentSubjectForSession={setCurrentSubjectForSession}\n                setIsSessionModalOpen={setIsSessionModalOpen}\n                setCurrentSubjectForSyllabus={setCurrentSubjectForSyllabus}\n                setIsSyllabusModalOpen={setIsSyllabusModalOpen}\n                setEditingSubject={setEditingSubject}\n                setConfirmationDialog={setConfirmationDialog}\n                handleDeleteSubject={handleDeleteSubject}\n                getSubjectStudyTime={getSubjectStudyTime}\n                calculateSubjectProgress={calculateSubjectProgress}\n                setIsSessionHistoryModalOpen={setIsSessionHistoryModalOpen}\n                setSelectedSubjectForHistory={setSelectedSubjectForHistory}\n              />\n\n              {/* Visão Geral das Matérias e Edital */}\n              <div className=\"card\">\n                <h2>\n                  <Eye size={20} />\n                  Visão Geral das Matérias e Edital\n                </h2>\n                <SubjectsOverview\n                  subjects={activeSubjects}\n                  syllabusItems={activeSyllabusItems}\n                  setSyllabusItems={setSyllabusItems}\n                  expandedSubjects={expandedSubjects}\n                  setExpandedSubjects={setExpandedSubjects}\n                  getSubjectStudyTime={getSubjectStudyTime}\n                  setSelectedSyllabusItem={setSelectedSyllabusItem}\n                  setIsItemDetailsModalOpen={setIsItemDetailsModalOpen}\n                  studySessions={activeSessions}\n                />\n              </div>\n            </>\n          )}\n        </>\n      )}\n\n      {/* Modais */}\n      <ProfileModal \n        isOpen={isProfileModalOpen}\n        onClose={() => {\n          setIsProfileModalOpen(false);\n          setEditingProfile(null);\n        }}\n        editingProfile={editingProfile}\n        onSubmit={handleProfileSubmit}\n        showToast={showToast}\n      />\n      \n      <SubjectModal \n        isOpen={isSubjectModalOpen}\n        onClose={() => {\n          setIsSubjectModalOpen(false);\n          setEditingSubject(null);\n        }}\n        editingSubject={editingSubject}\n        onSubmit={handleSubjectSubmit}\n        showToast={showToast}\n      />\n      \n      <SessionModal \n        isOpen={isSessionModalOpen}\n        onClose={() => {\n          setIsSessionModalOpen(false);\n          setEditingSession(null);\n          setCurrentSubjectForSession(null);\n          setInitialSessionData(null);\n        }}\n        editingSession={editingSession}\n        initialSessionData={initialSessionData}\n        currentSubjectForSession={currentSubjectForSession}\n        subjects={activeSubjects}\n        syllabusItems={activeSyllabusItems}\n        onSubmit={handleSessionSubmit}\n        showToast={showToast}\n      />\n      \n      <ItemDetailsModal\n        isOpen={isItemDetailsModalOpen}\n        onClose={() => {\n          setIsItemDetailsModalOpen(false);\n          setSelectedSyllabusItem(null);\n        }}\n        selectedItem={selectedSyllabusItem}\n        subjects={activeSubjects}\n        studySessions={activeSessions}\n      />\n\n      <SyllabusModal\n        isOpen={isSyllabusModalOpen}\n        onClose={() => {\n          setIsSyllabusModalOpen(false);\n          setCurrentSubjectForSyllabus(null);\n        }}\n        currentSubjectForSyllabus={currentSubjectForSyllabus}\n        syllabusItems={activeSyllabusItems}\n        setSyllabusItems={setSyllabusItems}\n        showToast={showToast}\n      />\n\n      <ProgressReportModal\n        isOpen={isProgressReportModalOpen}\n        onClose={() => setIsProgressReportModalOpen(false)}\n        subjects={activeSubjects}\n        studySessions={activeSessions}\n        syllabusItems={activeSyllabusItems}\n        getSubjectStudyTime={getSubjectStudyTime}\n      />\n\n      <SessionHistoryModal\n        isOpen={isSessionHistoryModalOpen}\n        onClose={() => {\n          setIsSessionHistoryModalOpen(false);\n          setSelectedSubjectForHistory(null);\n        }}\n        selectedSubject={selectedSubjectForHistory}\n        studySessions={activeSessions}\n        setEditingSession={setEditingSession}\n        setIsSessionModalOpen={setIsSessionModalOpen}\n        setConfirmationDialog={setConfirmationDialog}\n      />\n\n      {/* Toast */}\n      <Toast\n        message={toast.message}\n        type={toast.type}\n        isVisible={toast.isVisible}\n      />\n\n      {/* Confirmação */}\n      <ConfirmationDialog\n        isOpen={confirmationDialog.isOpen}\n        title={confirmationDialog.title}\n        message={confirmationDialog.message}\n        onConfirm={confirmationDialog.onConfirm}\n        onCancel={() => setConfirmationDialog({ isOpen: false, title: '', message: '', onConfirm: () => {} })}\n      />\n      {isSimuladoModalOpen && (\n        <div className=\"modal-overlay\" onClick={(e)=>{ if(e.target===e.currentTarget){ setIsSimuladoModalOpen(false); setEditingSimulado(null);} }}>\n          <div className=\"modal\" onClick={(e)=>e.stopPropagation()}>\n            <h2>{editingSimulado ? 'Editar Simulado' : 'Registrar Simulado'}<button className=\"close-btn\" onClick={()=>{setIsSimuladoModalOpen(false); setEditingSimulado(null);}}>×</button></h2>\n            <SimuladoForm\n              simulados={simulados}\n              setSimulados={setSimulados}\n              editingSimulado={editingSimulado}\n              setEditingSimulado={setEditingSimulado}\n              activeProfileId={activeProfileId}\n              onClose={()=>{setIsSimuladoModalOpen(false); setEditingSimulado(null);}}\n              showToast={showToast}\n            />\n          </div>\n        </div>\n      )}\n      {isImportEditalOpen && (\n        <div className=\"modal-overlay\" onClick={(e)=>{ if(e.target===e.currentTarget){ setIsImportEditalOpen(false);} }}>\n          <div className=\"modal\" onClick={(e)=>e.stopPropagation()}>\n            <h2>Importar Itens de Edital<button className=\"close-btn\" onClick={()=>setIsImportEditalOpen(false)}>×</button></h2>\n            <ImportEditalForm\n              globalEditais={globalEditais}\n              subjects={activeSubjects}\n              syllabusItems={syllabusItems}\n              setSyllabusItems={setSyllabusItems}\n              onClose={()=>setIsImportEditalOpen(false)}\n              showToast={showToast}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Componente interno para formulário de Simulado\nfunction SimuladoForm({ simulados, setSimulados, editingSimulado, setEditingSimulado, activeProfileId, onClose, showToast }) {\n  const [tipo, setTipo] = useState(editingSimulado?.tipo || 'objetivo');\n  const [data, setData] = useState(editingSimulado?.data || new Date().toISOString().split('T')[0]);\n  const [quantidadeQuestoes, setQuantidadeQuestoes] = useState(editingSimulado?.quantidadeQuestoes || '');\n  const [acertosObjetivas, setAcertosObjetivas] = useState(editingSimulado?.acertosObjetivas || '');\n  const [notaSubjetiva, setNotaSubjetiva] = useState(editingSimulado?.notaSubjetiva || '');\n  const [observacoes, setObservacoes] = useState(editingSimulado?.observacoes || '');\n\n  const calcularNotaFinal = () => {\n    if (tipo === 'objetivo') {\n      const q = parseFloat(quantidadeQuestoes);\n      const a = parseFloat(acertosObjetivas);\n      if (!isNaN(q) && q > 0 && !isNaN(a)) {\n        return ((a / q) * 100).toFixed(2);\n      }\n      return '';\n    } else {\n      return notaSubjetiva;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const notaFinal = calcularNotaFinal();\n    if (!activeProfileId) { showToast('Selecione um perfil', 'error'); return; }\n    if (tipo === 'objetivo' && (!quantidadeQuestoes || !acertosObjetivas)) { showToast('Informe questões e acertos', 'error'); return; }\n    if (tipo === 'subjetivo' && !notaSubjetiva) { showToast('Informe a nota', 'error'); return; }\n\n    if (editingSimulado) {\n      const updated = simulados.map(s => s.id === editingSimulado.id ? { ...s, tipo, data, quantidadeQuestoes: quantidadeQuestoes? Number(quantidadeQuestoes): null, acertosObjetivas: acertosObjetivas? Number(acertosObjetivas): null, notaSubjetiva: notaSubjetiva? Number(notaSubjetiva): null, notaFinal: notaFinal? Number(notaFinal): null, observacoes } : s);\n      setSimulados(updated);\n      saveToLocalStorage('simulados', updated);\n      showToast('Simulado atualizado', 'success');\n    } else {\n      const novo = { id: Date.now().toString(), profileId: activeProfileId, tipo, data, quantidadeQuestoes: quantidadeQuestoes? Number(quantidadeQuestoes): null, acertosObjetivas: acertosObjetivas? Number(acertosObjetivas): null, notaSubjetiva: notaSubjetiva? Number(notaSubjetiva): null, notaFinal: notaFinal? Number(notaFinal): null, observacoes, createdAt: new Date().toISOString() };\n      const updated = [...simulados, novo];\n      setSimulados(updated);\n      saveToLocalStorage('simulados', updated);\n      showToast('Simulado registrado', 'success');\n    }\n    onClose();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-3\">\n      <div className=\"form-group\">\n        <label className=\"form-label\">Tipo</label>\n        <select value={tipo} onChange={e=>setTipo(e.target.value)} className=\"form-input\">\n          <option value=\"objetivo\">Objetivo</option>\n          <option value=\"subjetivo\">Subjetivo</option>\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">Data</label>\n        <input type=\"date\" value={data} onChange={e=>setData(e.target.value)} className=\"form-input\" />\n      </div>\n      {tipo === 'objetivo' && (\n        <>\n          <div className=\"form-group\">\n            <label className=\"form-label\">Quantidade de Questões</label>\n            <input type=\"number\" value={quantidadeQuestoes} onChange={e=>setQuantidadeQuestoes(e.target.value)} className=\"form-input\" />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"form-label\">Acertos</label>\n            <input type=\"number\" value={acertosObjetivas} onChange={e=>setAcertosObjetivas(e.target.value)} className=\"form-input\" />\n          </div>\n        </>\n      )}\n      {tipo === 'subjetivo' && (\n        <div className=\"form-group\">\n          <label className=\"form-label\">Nota Subjetiva (0-100 ou escala utilizada)</label>\n          <input type=\"number\" value={notaSubjetiva} onChange={e=>setNotaSubjetiva(e.target.value)} className=\"form-input\" />\n        </div>\n      )}\n      <div className=\"form-group\">\n        <label className=\"form-label\">Observações</label>\n        <textarea value={observacoes} onChange={e=>setObservacoes(e.target.value)} className=\"form-input\" rows={3} />\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">Nota Final</label>\n        <input type=\"text\" value={calcularNotaFinal()} readOnly className=\"form-input bg-slate-100\" />\n      </div>\n      <div className=\"flex justify-end gap-2 pt-2\">\n        <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">Cancelar</button>\n        <button type=\"submit\" className=\"btn btn-primary\">{editingSimulado ? 'Salvar' : 'Registrar'}</button>\n      </div>\n    </form>\n  );\n}\n\nfunction ImportEditalForm({ globalEditais, subjects, syllabusItems, setSyllabusItems, onClose, showToast }) {\n  const [selectedEditalId, setSelectedEditalId] = useState('');\n  const [selectedSubjectId, setSelectedSubjectId] = useState(subjects[0]?.id || '');\n  const [applyPrefix, setApplyPrefix] = useState(false);\n  const [prefixText, setPrefixText] = useState('');\n\n  const edital = globalEditais.find(e=>e.id===selectedEditalId);\n\n  const handleImport = () => {\n    if (!edital || !selectedSubjectId) { showToast('Selecione edital e matéria', 'error'); return; }\n    const baseItems = edital.itens || [];\n    const newItems = baseItems.map(it => ({\n      id: Date.now().toString()+Math.random().toString(36).slice(2),\n      subjectId: selectedSubjectId,\n      name: (applyPrefix && prefixText? prefixText + ' ' : '') + it.name,\n      isStudied: false,\n      createdAt: new Date().toISOString()\n    }));\n    const updated = [...syllabusItems, ...newItems];\n    setSyllabusItems(updated);\n    saveToLocalStorage('syllabusItems', updated);\n    showToast(`${newItems.length} itens importados`, 'success');\n    onClose();\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"form-group\">\n        <label className=\"form-label\">Edital</label>\n        <select className=\"form-input\" value={selectedEditalId} onChange={e=>setSelectedEditalId(e.target.value)}>\n          <option value=\"\">Selecione...</option>\n          {globalEditais.map(e=> <option key={e.id} value={e.id}>{e.nome} ({e.itens.length})</option>)}\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">Matéria Destino</label>\n        <select className=\"form-input\" value={selectedSubjectId} onChange={e=>setSelectedSubjectId(e.target.value)}>\n          {subjects.map(s=> <option key={s.id} value={s.id}>{s.name}</option>)}\n        </select>\n      </div>\n      <div className=\"form-group flex items-center gap-2\">\n        <input type=\"checkbox\" checked={applyPrefix} onChange={e=>setApplyPrefix(e.target.checked)} />\n        <span className=\"text-sm\">Adicionar prefixo aos itens</span>\n      </div>\n      {applyPrefix && (\n        <div className=\"form-group\">\n          <input type=\"text\" className=\"form-input\" placeholder=\"Prefixo (ex: TJ2025)\" value={prefixText} onChange={e=>setPrefixText(e.target.value)} />\n        </div>\n      )}\n      {edital && (\n        <div className=\"text-xs text-slate-500 max-h-32 overflow-y-auto border p-2 rounded\">\n          Pré-visualização:\n          <ul className=\"mt-1 space-y-1\">\n            {edital.itens.slice(0,10).map(it => <li key={it.id}>{(applyPrefix && prefixText? prefixText + ' ' : '') + it.name}</li>)}\n            {edital.itens.length > 10 && <li className=\"italic\">... (+{edital.itens.length - 10} itens)</li>}\n          </ul>\n        </div>\n      )}\n      <div className=\"flex justify-end gap-2 pt-2\">\n        <button className=\"btn btn-secondary\" onClick={onClose}>Cancelar</button>\n        <button className=\"btn btn-primary\" onClick={handleImport} disabled={!selectedEditalId || !selectedSubjectId}>Importar</button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\r\nimport { Layers, ListTree, ChevronDown, ChevronRight } from 'lucide-react';\r\n\r\n// Converte texto numerado em hierarquia: Matéria (1.), Submatéria (1.1), Subtópico (1.1.1+)\r\nexport function parseHierarchicalEdital(text) {\r\n  const lines = text.split('\\n').map(l => l.trim()).filter(l => l.length > 0);\r\n  const materias = [];\r\n  let currentMateria = null;\r\n  let currentSub = null;\r\n\r\n  lines.forEach(line => {\r\n    const m = line.match(/^(\\d+(?:\\.\\d+)*)\\.?\\s+(.*)$/);\r\n    if (!m) return; // ignora linhas não numeradas\r\n    const path = m[1];\r\n    const name = m[2].trim();\r\n    const depth = path.split('.').length;\r\n\r\n    if (depth === 1) {\r\n      currentMateria = {\r\n        id: Date.now().toString()+Math.random().toString(36).slice(2),\r\n        nome: `${path}. ${name}`,\r\n        submaterias: []\r\n      };\r\n      materias.push(currentMateria);\r\n      currentSub = null;\r\n    } else if (depth === 2) {\r\n      if (!currentMateria) {\r\n        currentMateria = {\r\n          id: Date.now().toString()+Math.random().toString(36).slice(2),\r\n          nome: 'Sem Matéria '+path.split('.')[0],\r\n          submaterias: []\r\n        };\r\n        materias.push(currentMateria);\r\n      }\r\n      currentSub = {\r\n        id: Date.now().toString()+Math.random().toString(36).slice(2),\r\n        nome: `${path}. ${name}`,\r\n        subtopicos: []\r\n      };\r\n      currentMateria.submaterias.push(currentSub);\r\n    } else { // 3+ profundidade\r\n      if (!currentMateria) return;\r\n      if (!currentSub) {\r\n        currentSub = {\r\n          id: Date.now().toString()+Math.random().toString(36).slice(2),\r\n          nome: 'Submatéria desconhecida',\r\n          subtopicos: []\r\n        };\r\n        currentMateria.submaterias.push(currentSub);\r\n      }\r\n      currentSub.subtopicos.push({\r\n        id: Date.now().toString()+Math.random().toString(36).slice(2),\r\n        nome: `${path}. ${name}`\r\n      });\r\n    }\r\n  });\r\n\r\n  return materias;\r\n}\r\n\r\nexport default function EditalHierarchyProcessor({ onParsed }) {\r\n  const [rawText, setRawText] = useState('');\r\n  const [materias, setMaterias] = useState([]);\r\n  const [expanded, setExpanded] = useState({});\r\n\r\n  const handleProcess = () => {\r\n    const parsed = parseHierarchicalEdital(rawText);\r\n    setMaterias(parsed);\r\n    onParsed && onParsed(parsed);\r\n  };\r\n\r\n  const toggle = (id) => setExpanded(prev => ({ ...prev, [id]: !prev[id] }));\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <label className=\"block text-xs uppercase tracking-wide font-semibold text-slate-600 mb-1\">Texto do Edital (numerado)</label>\r\n        <textarea\r\n          value={rawText}\r\n          onChange={e=>setRawText(e.target.value)}\r\n          placeholder={'Exemplo:\\n1. Língua Portuguesa\\n1.1 Gramática\\n1.1.1 Classes de palavras\\n1.1.2 Sintaxe\\n2. Matemática\\n2.1 Álgebra\\n2.1.1 Equações'}\r\n          className=\"w-full h-40 border rounded p-3 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white text-slate-800 placeholder-slate-400\"\r\n        />\r\n        <button onClick={handleProcess} disabled={!rawText.trim()} className=\"mt-2 px-4 py-2 bg-indigo-600 text-white text-sm rounded hover:bg-indigo-700 disabled:opacity-50 flex items-center gap-1\"><Layers size={16}/> Processar Hierarquia</button>\r\n      </div>\r\n      {materias.length > 0 && (\r\n        <div className=\"border rounded-lg p-3 bg-slate-50\">\r\n          <h3 className=\"text-sm font-semibold text-slate-700 mb-2 flex items-center\"><ListTree size={16} className=\"mr-1 text-indigo-600\"/>Pré-visualização ({materias.length} matérias)</h3>\r\n          <ul className=\"space-y-1 text-sm\">\r\n            {materias.map(mat => (\r\n              <li key={mat.id} className=\"\">\r\n                <div className=\"flex items-start\">\r\n                  <button type=\"button\" onClick={()=>toggle(mat.id)} className=\"mr-1 text-slate-600 hover:text-slate-800 mt-0.5\">{expanded[mat.id] ? <ChevronDown size={16}/> : <ChevronRight size={16}/>}</button>\r\n                  <span className=\"font-medium text-slate-800\">{mat.nome}</span>\r\n                </div>\r\n                {expanded[mat.id] && mat.submaterias.length>0 && (\r\n                  <ul className=\"ml-5 mt-1 space-y-1 border-l pl-3 border-slate-300\">\r\n                    {mat.submaterias.map(sub => (\r\n                      <li key={sub.id}>\r\n                        <div className=\"flex items-start\">\r\n                          <button type=\"button\" onClick={()=>toggle(sub.id)} className=\"mr-1 text-slate-500 hover:text-slate-700 mt-0.5\">{expanded[sub.id] ? <ChevronDown size={14}/> : <ChevronRight size={14}/>}</button>\r\n                          <span className=\"text-slate-700\">{sub.nome}</span>\r\n                        </div>\r\n                        {expanded[sub.id] && sub.subtopicos.length>0 && (\r\n                          <ul className=\"ml-5 mt-1 space-y-0.5 list-disc marker:text-indigo-500\">\r\n                            {sub.subtopicos.map(top => (\r\n                              <li key={top.id} className=\"text-slate-600\">{top.nome}</li>\r\n                            ))}\r\n                          </ul>\r\n                        )}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAxRywmrAPxIER9x8kWicwUWsBKteQ54_s\",\n  authDomain: \"organizadorestudo.firebaseapp.com\",\n  projectId: \"organizadorestudo\",\n  storageBucket: \"organizadorestudo.firebasestorage.app\",\n  messagingSenderId: \"872263455038\",\n  appId: \"1:872263455038:web:4b1ff1de308bd050689c6f\",\n  measurementId: \"G-WKWKHT1SKD\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\nexport const isConfigValid = true;\n\nconsole.log('🔥 Firebase configurado e conectado');\n\nexport default app;\n","import { db } from '../config/firebase';\r\nimport { collection, doc, getDoc, setDoc, Timestamp } from 'firebase/firestore';\r\n\r\n// Documento único: collection 'config', doc 'globalEditais' // documento único\r\nconst CONFIG_COLLECTION = 'config';\r\nconst GLOBAL_EDITAIS_DOC = 'globalEditais';\r\n\r\n// Normalização de estruturas antigas (legacy) para novo formato concursos\r\nfunction normalizeToConcursos(rawList) {\r\n  return (rawList || []).map(e => {\r\n    if (e.materias) return e; // já estruturado\r\n    if (e.hierarquia) {\r\n      return {\r\n        id: e.id,\r\n        nome: e.nome || e.nomeConcurso || 'Concurso',\r\n        descricao: e.descricao || '',\r\n        materias: e.hierarquia.map(m => ({\r\n          id: m.id,\r\n            nome: m.nome,\r\n            submaterias: (m.submaterias || []).map(s => ({\r\n              id: s.id,\r\n              nome: s.nome,\r\n              subtopicos: (s.subtopicos || []).map(t => ({ id: t.id, nome: t.nome }))\r\n            }))\r\n        })),\r\n        createdAt: e.createdAt || new Date().toISOString(),\r\n        updatedAt: e.updatedAt || e.createdAt || new Date().toISOString()\r\n      };\r\n    }\r\n    if (e.itens && e.itens.length > 0) {\r\n      return {\r\n        id: e.id,\r\n        nome: e.nome || 'Concurso',\r\n        descricao: e.descricao || '',\r\n        materias: [\r\n          {\r\n            id: 'geral-' + e.id,\r\n            nome: 'Geral',\r\n            submaterias: [\r\n              {\r\n                id: 'geral-sub-' + e.id,\r\n                nome: 'Conteúdo',\r\n                subtopicos: e.itens.map(it => ({ id: it.id || (Date.now().toString()+Math.random().toString(36).slice(2)), nome: it.name || it.nome || it }))\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        createdAt: e.createdAt || new Date().toISOString(),\r\n        updatedAt: e.updatedAt || e.createdAt || new Date().toISOString()\r\n      };\r\n    }\r\n    return {\r\n      id: e.id || Date.now().toString()+Math.random().toString(36).slice(2),\r\n      nome: e.nome || 'Concurso',\r\n      descricao: e.descricao || '',\r\n      materias: [],\r\n      createdAt: e.createdAt || new Date().toISOString(),\r\n      updatedAt: e.updatedAt || e.createdAt || new Date().toISOString()\r\n    };\r\n  });\r\n}\r\n\r\nexport async function fetchGlobalEditais() {\r\n  try {\r\n    const ref = doc(collection(db, CONFIG_COLLECTION), GLOBAL_EDITAIS_DOC);\r\n    const snap = await getDoc(ref);\r\n    if (!snap.exists()) return [];\r\n    const data = snap.data();\r\n    if (data.concursos) return data.concursos; // já no novo formato\r\n    const legacy = data.editais || [];\r\n    return normalizeToConcursos(legacy);\r\n  } catch (e) {\r\n    console.error('Erro ao buscar editais globais', e);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function saveGlobalEditais(concursos) {\r\n  try {\r\n    const ref = doc(collection(db, CONFIG_COLLECTION), GLOBAL_EDITAIS_DOC);\r\n    await setDoc(ref, { concursos, updatedAt: Timestamp.now() }, { merge: true });\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Erro ao salvar concursos globais', e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function appendItemsToEdital(editalId, items) {\r\n  try {\r\n    const current = await fetchGlobalEditais();\r\n    const updated = current.map(e => {\r\n      if (e.id === editalId) {\r\n        // Se concurso possui materias estruturadas não mescla itens flat\r\n        if (e.materias) return e; // ignore para hierarquia (append via funções específicas futuramente)\r\n        return { ...e, itens: [...(e.itens||[]), ...items] };\r\n      }\r\n      return e;\r\n    });\r\n    await saveGlobalEditais(updated);\r\n    return updated;\r\n  } catch (e) {\r\n    console.error('Erro ao anexar itens', e);\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport async function addNewEdital(novo) {\r\n  const current = await fetchGlobalEditais();\r\n  const updated = [...current, { ...novo, createdAt: novo.createdAt || new Date().toISOString(), updatedAt: new Date().toISOString() }];\r\n  await saveGlobalEditais(updated);\r\n  return updated;\r\n}\r\n\r\n// Adiciona matéria a um concurso hierárquico\r\nexport async function addMateria(concursoId, materia) {\r\n  const current = await fetchGlobalEditais();\r\n  const updated = current.map(c => c.id === concursoId ? { ...c, materias: [...(c.materias||[]), materia], updatedAt: new Date().toISOString() } : c);\r\n  await saveGlobalEditais(updated);\r\n  return updated.find(c=>c.id===concursoId);\r\n}\r\n\r\nexport async function updateMateria(concursoId, materiaId, patch) {\r\n  const current = await fetchGlobalEditais();\r\n  const updated = current.map(c => {\r\n    if (c.id !== concursoId) return c;\r\n    return {\r\n      ...c,\r\n      materias: c.materias.map(m => m.id === materiaId ? { ...m, ...patch } : m),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n  });\r\n  await saveGlobalEditais(updated);\r\n  return updated.find(c=>c.id===concursoId);\r\n}\r\n\r\nexport async function addSubmateria(concursoId, materiaId, sub) {\r\n  const current = await fetchGlobalEditais();\r\n  const updated = current.map(c => {\r\n    if (c.id !== concursoId) return c;\r\n    return {\r\n      ...c,\r\n      materias: c.materias.map(m => m.id === materiaId ? { ...m, submaterias: [...(m.submaterias||[]), sub] } : m),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n  });\r\n  await saveGlobalEditais(updated);\r\n  return updated.find(c=>c.id===concursoId);\r\n}\r\n\r\nexport async function addSubtopico(concursoId, materiaId, submateriaId, topico) {\r\n  const current = await fetchGlobalEditais();\r\n  const updated = current.map(c => {\r\n    if (c.id !== concursoId) return c;\r\n    return {\r\n      ...c,\r\n      materias: c.materias.map(m => {\r\n        if (m.id !== materiaId) return m;\r\n        return {\r\n          ...m,\r\n          submaterias: m.submaterias.map(s => s.id === submateriaId ? { ...s, subtopicos: [...(s.subtopicos||[]), topico] } : s)\r\n        };\r\n      }),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n  });\r\n  await saveGlobalEditais(updated);\r\n  return updated.find(c=>c.id===concursoId);\r\n}\r\n\r\nexport function flattenConcurso(concurso) {\r\n  const materias = [];\r\n  const submaterias = [];\r\n  const subtopicos = [];\r\n  (concurso.materias||[]).forEach(m => {\r\n    materias.push(m.nome.toLowerCase());\r\n    (m.submaterias||[]).forEach(s => {\r\n      submaterias.push(`${m.nome.toLowerCase()}::${s.nome.toLowerCase()}`);\r\n      (s.subtopicos||[]).forEach(t => {\r\n        subtopicos.push(`${m.nome.toLowerCase()}::${s.nome.toLowerCase()}::${t.nome.toLowerCase()}`);\r\n      });\r\n    });\r\n  });\r\n  return { materias, submaterias, subtopicos };\r\n}\r\n\r\nexport function compareConcursos(a, b) {\r\n  const fa = flattenConcurso(a);\r\n  const fb = flattenConcurso(b);\r\n  function intersect(arr1, arr2) { const s2 = new Set(arr2); return arr1.filter(x=>s2.has(x)); }\r\n  function diff(arr1, arr2) { const s2 = new Set(arr2); return arr1.filter(x=>!s2.has(x)); }\r\n  return {\r\n    materias: { comuns: intersect(fa.materias, fb.materias), aExclusivas: diff(fa.materias, fb.materias), bExclusivas: diff(fb.materias, fa.materias) },\r\n    submaterias: { comuns: intersect(fa.submaterias, fb.submaterias), aExclusivas: diff(fa.submaterias, fb.submaterias), bExclusivas: diff(fb.submaterias, fa.submaterias) },\r\n    subtopicos: { comuns: intersect(fa.subtopicos, fb.subtopicos), aExclusivas: diff(fa.subtopicos, fb.subtopicos), bExclusivas: diff(fb.subtopicos, fa.subtopicos) }\r\n  };\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ClipboardPaste, PlusCircle, Trash2, Save, RefreshCw, Loader2 } from 'lucide-react';\r\nimport { SyllabusProcessor } from './components/SyllabusProcessor';\r\nimport EditalHierarchyProcessor, { parseHierarchicalEdital } from './components/EditalHierarchyProcessor';\r\nimport { loadFromLocalStorage, saveToLocalStorage } from './utils/localStorage';\r\nimport { fetchGlobalEditais, addNewEdital, appendItemsToEdital, saveGlobalEditais } from './services/globalEditaisService';\r\n\r\n// Página de administração para cadastrar editais globais reutilizáveis\r\n// Esses editais poderão ser selecionados pelos usuários em seus perfis para carregar itens\r\nexport default function AdminPage() {\r\n  const [globalEditais, setGlobalEditais] = useState([]); // {id, nome, descricao, itens:[{id,name}]}\r\n  const [selectedEditalId, setSelectedEditalId] = useState(null);\r\n  const [newEditalName, setNewEditalName] = useState('');\r\n  const [newEditalDescription, setNewEditalDescription] = useState('');\r\n  const [tempItems, setTempItems] = useState([]); // itens flat temporários\r\n  const [hierarquia, setHierarquia] = useState([]); // estrutura hierárquica (materias -> submaterias -> subtopicos)\r\n  const [useHierarchy, setUseHierarchy] = useState(true);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [syncMessage, setSyncMessage] = useState('');\r\n\r\n  const loadFromFirestore = async () => {\r\n    setLoading(true);\r\n    const remote = await fetchGlobalEditais();\r\n    setGlobalEditais(remote);\r\n    saveToLocalStorage('globalEditais', remote); // cache local\r\n    setLoading(false);\r\n    setSyncMessage(`Carregado ${remote.length} edital(is) do servidor`);\r\n    setTimeout(()=>setSyncMessage(''), 3000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadFromFirestore();\r\n  }, []);\r\n\r\n  const persist = async (list) => {\r\n    setGlobalEditais(list);\r\n    saveToLocalStorage('globalEditais', list);\r\n    await saveGlobalEditais(list);\r\n  };\r\n\r\n  const handleCreateEdital = async () => {\r\n    if (!newEditalName.trim()) return;\r\n    if (useHierarchy && hierarquia.length === 0) return;\r\n    setLoading(true);\r\n    const newEdital = {\r\n      id: Date.now().toString(),\r\n      nome: newEditalName.trim(),\r\n      descricao: newEditalDescription.trim(),\r\n      itens: useHierarchy ? [] : tempItems,\r\n      hierarquia: useHierarchy ? hierarquia : null,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    const updated = await addNewEdital(newEdital);\r\n    setGlobalEditais(updated);\r\n    saveToLocalStorage('globalEditais', updated);\r\n    setSelectedEditalId(newEdital.id);\r\n    setNewEditalName('');\r\n    setNewEditalDescription('');\r\n    setTempItems([]);\r\n    setHierarquia([]);\r\n    setLoading(false);\r\n    setSyncMessage('Edital criado e sincronizado');\r\n    setTimeout(()=>setSyncMessage(''), 3000);\r\n  };\r\n\r\n  const handleDeleteEdital = async (id) => {\r\n    if (!confirm('Remover este edital?')) return;\r\n    const updated = globalEditais.filter(e => e.id !== id);\r\n    await persist(updated);\r\n    if (selectedEditalId === id) setSelectedEditalId(null);\r\n    setSyncMessage('Edital removido');\r\n    setTimeout(()=>setSyncMessage(''), 2500);\r\n  };\r\n\r\n  const selectedEdital = globalEditais.find(e => e.id === selectedEditalId) || null;\r\n\r\n  const handleProcessAddMultiple = (names) => {\r\n    const newOnes = names.map(n => ({ id: Date.now().toString() + Math.random().toString(36).slice(2), name: n, createdAt: new Date().toISOString() }));\r\n    setTempItems(prev => [...prev, ...newOnes]);\r\n  };\r\n\r\n  const handleAttachItemsToExistingEdital = async () => {\r\n    if (!selectedEdital) return;\r\n    setLoading(true);\r\n    const newItems = tempItems.map(i=>({ ...i, id: i.id || Date.now().toString()+Math.random().toString(36).slice(2) }));\r\n    const updated = await appendItemsToEdital(selectedEdital.id, newItems);\r\n    setGlobalEditais(updated);\r\n    saveToLocalStorage('globalEditais', updated);\r\n    setTempItems([]);\r\n    setLoading(false);\r\n    setSyncMessage('Itens adicionados e sincronizados');\r\n    setTimeout(()=>setSyncMessage(''), 3000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-6xl mx-auto text-slate-800\" style={{background:'#f8fafc', minHeight:'100vh'}}>\r\n      <h1 className=\"text-3xl font-bold mb-2 text-slate-900\">Admin - Cadastro de Editais</h1>\r\n      <p className=\"text-sm text-slate-600 mb-4\">Gerencie os editais globais disponíveis para importação pelos usuários.</p>\r\n      <div className=\"flex items-center gap-3 mb-6\">\r\n        <button onClick={loadFromFirestore} className=\"px-3 py-2 bg-indigo-600 text-white text-sm rounded flex items-center gap-1 hover:bg-indigo-700\"><RefreshCw size={16}/> Atualizar</button>\r\n        <button onClick={()=>persist(globalEditais)} className=\"px-3 py-2 bg-emerald-600 text-white text-sm rounded flex items-center gap-1 hover:bg-emerald-700\"><Save size={16}/> Forçar Sincronização</button>\r\n        {loading && <span className=\"flex items-center text-sm text-slate-500\"><Loader2 size={16} className=\"mr-1 animate-spin\"/> Salvando...</span>}\r\n        {syncMessage && <span className=\"text-xs px-2 py-1 bg-slate-200 rounded text-slate-700\">{syncMessage}</span>}\r\n      </div>\r\n\r\n      <div className=\"grid md:grid-cols-3 gap-6\">\r\n        {/* Lista de editais */}\r\n    <div className=\"md:col-span-1 border rounded-lg p-4 bg-white shadow-sm\">\r\n          <h2 className=\"font-semibold mb-3 flex items-center justify-between\">Editais Cadastrados <span className=\"text-xs bg-slate-100 px-2 py-0.5 rounded\">{globalEditais.length}</span></h2>\r\n          <ul className=\"space-y-2 max-h-96 overflow-y-auto custom-scrollbar\">\r\n            {globalEditais.map(edital => (\r\n        <li key={edital.id} className={`p-2 border rounded cursor-pointer flex items-center justify-between transition-colors ${selectedEditalId === edital.id ? 'border-indigo-500 bg-indigo-50 shadow-sm' : 'border-slate-200 hover:bg-slate-100'}`} onClick={() => setSelectedEditalId(edital.id)}>\r\n                <div className=\"mr-2\">\r\n          <div className=\"text-sm font-semibold text-slate-800\">{edital.nome}</div>\r\n          <div className=\"text-xs text-slate-500\">{edital.itens.length} itens</div>\r\n                </div>\r\n                <button className=\"text-red-500 hover:text-red-600\" onClick={(e) => { e.stopPropagation(); handleDeleteEdital(edital.id); }} title=\"Excluir\"><Trash2 size={16}/></button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Formulário / Processor */}\r\n        <div className=\"md:col-span-2 space-y-6\">\r\n          <div className=\"border rounded-lg p-5 bg-white shadow-sm\">\r\n            <h2 className=\"font-semibold mb-4 flex items-center text-slate-900\"><PlusCircle size={18} className=\"mr-2 text-indigo-600\"/>Novo Edital</h2>\r\n            <div className=\"flex items-center gap-2 mb-4 text-xs font-medium text-slate-600\">\r\n              <label className=\"flex items-center gap-1 cursor-pointer\"><input type=\"radio\" checked={useHierarchy} onChange={()=>setUseHierarchy(true)} /> Hierarquia</label>\r\n              <label className=\"flex items-center gap-1 cursor-pointer\"><input type=\"radio\" checked={!useHierarchy} onChange={()=>setUseHierarchy(false)} /> Lista Simples</label>\r\n            </div>\r\n            <div className=\"grid gap-4 mb-4 md:grid-cols-2\">\r\n              <div className=\"flex flex-col gap-1\">\r\n                <label className=\"text-xs uppercase tracking-wide font-semibold text-slate-600\">Nome</label>\r\n                <input value={newEditalName} onChange={e => setNewEditalName(e.target.value)} placeholder=\"Ex: TJ-2025\" className=\"border px-3 py-2 rounded text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white text-slate-800 placeholder-slate-400\" />\r\n              </div>\r\n              <div className=\"flex flex-col gap-1 md:col-span-2\">\r\n                <label className=\"text-xs uppercase tracking-wide font-semibold text-slate-600\">Descrição</label>\r\n                <textarea value={newEditalDescription} onChange={e => setNewEditalDescription(e.target.value)} placeholder=\"Descrição / Observações\" className=\"border px-3 py-2 rounded text-sm h-24 resize-y focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white text-slate-800 placeholder-slate-400\" />\r\n              </div>\r\n            </div>\r\n            {useHierarchy && hierarquia.length > 0 && (\r\n              <div className=\"mb-4 p-3 bg-indigo-50 border border-indigo-200 rounded text-xs text-indigo-700 font-medium flex items-center justify-between\">\r\n                <span>{hierarquia.length} matéria(s) estruturadas prontas.</span>\r\n                <button onClick={()=>setHierarquia([])} className=\"text-indigo-600 hover:underline\">Limpar</button>\r\n              </div>\r\n            )}\r\n            {!useHierarchy && tempItems.length > 0 && (\r\n              <div className=\"mb-4 p-3 bg-indigo-50 border border-indigo-200 rounded text-xs text-indigo-700 font-medium flex items-center justify-between\">\r\n                <span>{tempItems.length} item(s) prontos para salvar.</span>\r\n                <button onClick={()=>setTempItems([])} className=\"text-indigo-600 hover:underline\">Limpar</button>\r\n              </div>\r\n            )}\r\n            <div className=\"flex flex-wrap gap-3\">\r\n              <button onClick={handleCreateEdital} disabled={!newEditalName.trim() || (useHierarchy ? hierarquia.length===0 : false)} className=\"px-4 py-2 bg-indigo-600 text-white rounded text-sm font-medium hover:bg-indigo-700 disabled:opacity-50 flex items-center gap-1\"><Save size={16}/> Salvar</button>\r\n              {selectedEdital && tempItems.length > 0 && (\r\n                <button onClick={handleAttachItemsToExistingEdital} className=\"px-4 py-2 bg-emerald-600 text-white rounded text-sm font-medium hover:bg-emerald-700\">Adicionar ao Edital Selecionado</button>\r\n              )}\r\n              <button onClick={() => setTempItems([])} className=\"px-4 py-2 bg-slate-600 text-white rounded text-sm font-medium hover:bg-slate-700\">Limpar Temporários</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"border rounded-lg p-5 bg-white shadow-sm\">\r\n            <h2 className=\"font-semibold mb-2 flex items-center text-slate-900\"><ClipboardPaste size={18} className=\"mr-2 text-indigo-600\"/>Processar Texto de Edital</h2>\r\n            {useHierarchy ? (\r\n              <EditalHierarchyProcessor onParsed={(estrut)=> setHierarquia(estrut)} />\r\n            ) : (\r\n              <>\r\n                <p className=\"text-xs text-slate-600 mb-4\">Modo lista simples.</p>\r\n                <SyllabusProcessor\r\n                  onAddMultipleItems={(items) => handleProcessAddMultiple(items)}\r\n                  showToast={(m)=>console.log(m)}\r\n                  syllabusItems={[]}\r\n                  onUpdateItemName={()=>{}}\r\n                  onDeleteItem={()=>{}}\r\n                  onMoveItemUp={()=>{}}\r\n                  onMoveItemDown={()=>{}}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {selectedEdital && (\r\n            <div className=\"border rounded-lg p-5 bg-white shadow-sm\">\r\n              <h2 className=\"font-semibold mb-4 text-slate-900\">Itens do Edital: <span className=\"text-indigo-700\">{selectedEdital.nome}</span></h2>\r\n              <div className=\"text-xs text-slate-500 mb-2\">Total: {selectedEdital.itens.length}</div>\r\n              <ul className=\"text-sm space-y-1 max-h-72 overflow-y-auto custom-scrollbar divide-y divide-slate-100\">\r\n                {selectedEdital.itens.map(it => (\r\n                  <li key={it.id} className=\"py-1.5 flex items-start\">\r\n                    <span className=\"text-slate-700 whitespace-pre-wrap leading-snug\">{it.name}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","/**\n * Application entry point\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.jsx';\nimport AdminPage from './Admin.jsx';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport './index.css';\n\n// Simple startup log\nconsole.log('Organizador de Estudos - Starting application...');\n\n// Error handling for unhandled promise rejections\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason);\n  // Prevent the default browser behavior\n  event.preventDefault();\n});\n\n// Error handling for uncaught errors\nwindow.addEventListener('error', (event) => {\n  console.error('Uncaught error:', event.message, event.filename, event.lineno);\n});\n\n// Create root and render app\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/admin\" element={<AdminPage />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","SyllabusProcessor","onAddMultipleItems","showToast","syllabusItems","onUpdateItemName","onDeleteItem","onMoveItemUp","onMoveItemDown","pastedSyllabusText","setPastedSyllabusText","useState","processedPastedItems","setProcessedPastedItems","isPasteAreaVisible","setIsPasteAreaVisible","editingItemId","setEditingItemId","editingItemNameValue","setEditingItemNameValue","handleProcessPastedSyllabus","text","parsedItemsOutput","subjectMatch","processText","segment","mainItemMatch","number","content","subItemMatch","subSubItemMatch","anyNumberMatch","cleanNumber","filteredItems","item","handleEditItemNameClick","handleSaveItemName","itemId","oldItem","i","SyllabusItemDisplay","onEditItemName","isFirst","isLast","isSubItem","jsx","jsxs","ChevronUp","ChevronDown","Edit3","Trash2","ClipboardPaste","index","ProfileModal","isOpen","onClose","editingProfile","onSubmit","formData","setFormData","useEffect","handleSubmit","prev","SubjectModal","editingSubject","ItemDetailsModal","selectedItem","subjects","studySessions","subjectName","_a","s","itemSessions","session","SyllabusModal","currentSubjectForSyllabus","setSyllabusItems","newItemName","setNewItemName","handleAddItem","newItem","updatedItems","handleAddMultipleItems","items","newItems","itemName","handleUpdateItemName","oldName","newName","handleDeleteItem","handleMoveItemUp","currentIndex","handleMoveItemDown","subjectItems","SessionHistoryModal","selectedSubject","setEditingSession","setIsSessionModalOpen","setConfirmationDialog","subjectSessions","totalTime","total","handleEditSession","handleDeleteSession","sessionId","ProgressReportModal","getSubjectStudyTime","totalStudyTime","studiedSyllabusItems","averageAccuracy","sum","subject","subjectTime","subjectSyllabusItems","studiedSubjectItems","progress","SessionModal","editingSession","initialSessionData","currentSubjectForSession","days","nextReviewDate","SubjectsOverview","expandedSubjects","setExpandedSubjects","setSelectedSyllabusItem","setIsItemDetailsModalOpen","activeFilters","setActiveFilters","editingItem","setEditingItem","tempAccuracy","setTempAccuracy","tempWeight","setTempWeight","getAccuracyColor","accuracy","getWeightColor","weight","calculateNextReviewDate","today","daysToAdd","getItemAccuracyFromSessions","totalAccuracy","handleSaveAccuracy","handleSaveWeight","filterItems","subjectId","getHierarchyLevel","trimmed","numberMatch","dots","studiedItems","studiedPercentage","isExpanded","newExpanded","Fragment","hierarchyLevel","isSubItemFlag","sessionAccuracy","displayAccuracy","Eye","_b","Edit2","SubjectsManagement","setIsSubjectModalOpen","setCurrentSubjectForSession","setCurrentSubjectForSyllabus","setIsSyllabusModalOpen","setEditingSubject","handleDeleteSubject","calculateSubjectProgress","setIsSessionHistoryModalOpen","setSelectedSubjectForHistory","BookOpen","PlusCircle","PlayCircle","CheckCircle","ListChecks","History","Edit","AppHeader","setIsProgressReportModalOpen","handleExportData","handleImportData","studyProfiles","activeProfileId","setActiveProfileId","onOpenProfileModal","BarChart3","Download","Upload","file","Users","Plus","Calendar","onDateClick","currentDate","setCurrentDate","year","month","firstDayOfMonth","daysInMonth","startingDayOfWeek","goToPreviousMonth","goToNextMonth","getDateInfo","day","dateStr","sessionsOnDate","reviewsOnDate","isToday","monthNames","dayNames","CalendarIcon","ChevronLeft","ChevronRight","dayName","dateInfo","isCurrentDay","saveToLocalStorage","key","data","serializedData","error","loadFromLocalStorage","defaultValue","App","isLoading","setIsLoading","toast","setToast","confirmationDialog","selectedSyllabusItem","isItemDetailsModalOpen","loadingMessage","setLoadingMessage","currentView","setCurrentView","setStudyProfiles","setSubjects","setStudySessions","simulados","setSimulados","isSimuladoModalOpen","setIsSimuladoModalOpen","editingSimulado","setEditingSimulado","globalEditais","setGlobalEditais","isImportEditalOpen","setIsImportEditalOpen","isProfileModalOpen","setIsProfileModalOpen","setEditingProfile","isSubjectModalOpen","isSessionModalOpen","setInitialSessionData","isSyllabusModalOpen","isProgressReportModalOpen","isSessionHistoryModalOpen","selectedSubjectForHistory","handleProfileSubmit","handleUpdateProfile","handleCreateProfile","handleSubjectSubmit","handleUpdateSubject","handleCreateSubject","handleSessionSubmit","handleUpdateSession","handleCreateSession","message","type","getUrgentReviews","getNextReviewDate","futureReviews","handleSetActiveProfile","profileId","newProfile","updatedProfiles","id","profile","newSubject","updatedSubjects","updatedSyllabusItems","updatedSessions","newSession","blob","url","reader","backupData","importedProfile","LoadingSpinner","Breadcrumb","activeProfile","viewNames","QuickStats","totalSubjects","activeSubjects","totalItems","activeSyllabusItems","totalHours","activeSessions","Toast","isVisible","icons","ConfirmationDialog","title","onConfirm","onCancel","handleKeyPress","resolve","savedProfiles","savedActiveProfileId","savedSubjects","savedSessions","savedSyllabusItems","savedSimulados","savedGlobalEditais","demoSubjects","demoSessions","activeSimulados","date","SimuladoForm","ImportEditalForm","tipo","setTipo","setData","quantidadeQuestoes","setQuantidadeQuestoes","acertosObjetivas","setAcertosObjetivas","notaSubjetiva","setNotaSubjetiva","observacoes","setObservacoes","calcularNotaFinal","notaFinal","updated","novo","selectedEditalId","setSelectedEditalId","selectedSubjectId","setSelectedSubjectId","applyPrefix","setApplyPrefix","prefixText","setPrefixText","edital","handleImport","it","parseHierarchicalEdital","lines","materias","currentMateria","currentSub","line","path","name","depth","EditalHierarchyProcessor","onParsed","rawText","setRawText","setMaterias","expanded","setExpanded","handleProcess","parsed","toggle","Layers","ListTree","mat","sub","top","firebaseConfig","app","initializeApp","db","getFirestore","getAuth","CONFIG_COLLECTION","GLOBAL_EDITAIS_DOC","normalizeToConcursos","rawList","t","fetchGlobalEditais","ref","doc","collection","snap","getDoc","legacy","saveGlobalEditais","concursos","setDoc","Timestamp","appendItemsToEdital","editalId","addNewEdital","AdminPage","newEditalName","setNewEditalName","newEditalDescription","setNewEditalDescription","tempItems","setTempItems","hierarquia","setHierarquia","useHierarchy","setUseHierarchy","loading","setLoading","syncMessage","setSyncMessage","loadFromFirestore","remote","persist","list","handleCreateEdital","newEdital","handleDeleteEdital","selectedEdital","handleProcessAddMultiple","names","newOnes","handleAttachItemsToExistingEdital","RefreshCw","Save","Loader2","estrut","_extends","target","source","Action","PopStateEventType","createBrowserHistory","options","createBrowserLocation","window","globalHistory","pathname","search","hash","createLocation","createBrowserHref","to","createPath","getUrlBasedHistory","invariant","value","warning","cond","createKey","getHistoryState","location","current","state","parsePath","_ref","parsedPath","hashIndex","searchIndex","getLocation","createHref","validateLocation","v5Compat","action","listener","getIndex","handlePop","nextIndex","delta","history","push","historyState","replace","createURL","base","href","fn","ResultType","matchRoutes","routes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","score","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","normalizePathname","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","caseSensitive","params","regexpSource","_","v","startIndex","nextChar","paths","isRouteErrorResponse","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React.createContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","RouteErrorContext","useInRouterContext","React.useContext","useLocation","UNSAFE_invariant","useRoutes","useRoutesImpl","dataRouterState","future","navigator","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","React.createElement","DefaultErrorComponent","useRouteError","stack","preStyles","React.Fragment","defaultErrorElement","RenderErrorBoundary","React.Component","props","errorInfo","RenderedRoute","routeContext","children","dataRouterContext","_dataRouterState","_future","errors","errorIndex","renderFallback","fallbackIndex","loaderData","needsToRunLoader","outlet","shouldRenderHydrateFallback","errorElement","hydrateFallbackElement","warningOnce","getChildren","DataRouterStateHook","useDataRouterState","hookName","useRouteContext","useCurrentRouteId","thisRoute","_state$errors","routeId","alreadyWarned$1","logV6DeprecationWarnings","renderFuture","routerFuture","Route","_props","Router","_ref5","basenameProp","locationProp","navigationType","staticProp","navigationContext","React.useMemo","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","React.Children","element","React.isValidElement","treePath","REACT_ROUTER_VERSION","START_TRANSITION","startTransitionImpl","React","BrowserRouter","_ref4","historyRef","React.useRef","setStateImpl","React.useState","v7_startTransition","setState","React.useCallback","newState","React.useLayoutEffect","React.useEffect","UNSAFE_logV6DeprecationWarnings","DataRouterHook","event","root","ReactDOM"],"mappings":"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","x_google_ignoreList":[0,1,2,16,17,18]}